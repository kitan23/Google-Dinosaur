Microsoft (R) Macro Assembler Version 6.11		    10/30/22 18:33:41
dino.asm						     Page 1 - 1


				.model small 
				.stack 100h
 0000				.data
 0000 50 6C 61 79 20 47		playGame db "Play Game"
       61 6D 65
 0009 49 6E 73 74 72 75			instructions db "Instructions"
       63 74 69 6F 6E 73
 0015 45 78 69 74			exitStatement db "Exit"
 0019 47 4F 4F 44 20 42			goodBye db "GOOD BYE  :)"
       59 45 20 20 3A 29
 0025 33 33 33 33 33 33			 Dino 	DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0057  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0089  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 00BB  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 00ED  33 33 33 33 33 33				DB '33333333333333333333333333333333333333366666333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 36 36 36
       36 36 33 33 33 33
       33 33
 011F  33 33 33 33 33 33				DB '3333333333333333333333333333333333333366664E66CC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       34 45 36 36 43 43
       33 33
 0151  33 33 33 33 33 33				DB '3333333333333333333333333333333333333666CCCCCCCC63'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 43 43 43 43
       36 33
 0183  33 33 33 33 33 33				DB '333333333333333333333333333333333333666CCC4F4CCCC3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 43 43 43
       34 46 34 43 43 43
       43 33
 01B5  33 33 33 33 33 33				DB '3333333333333333333333333333333366666C6CCCC4F3F3F3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 43 36 43 43 43
       43 34 46 33 46 33
       46 33
 01E7  33 33 33 33 33 33				DB '33333333333333333333333333333336666C6CCCCCCCC43F33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 43 43 43 43 43
       43 43 43 34 33 46
       33 33
 0219  33 33 33 33 33 33				DB '333333333333333333333333336666666C6CCCCC63CCCCCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 36 36 43 36 43
       43 43 43 43 36 33
       43 43 43 43 43 43
       33 33
 024B  33 33 33 33 33 33				DB '33333333333333333333333336666C66C6CCCCC633333CCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 36 43 36 43 43
       43 43 43 36 33 33
       33 33 33 43 43 43
       33 33
 027D  33 33 33 33 33 33				DB '33333333333333333333336666666666CCCCCCC33333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 36 36 36 36
       36 36 43 43 43 43
       43 43 43 33 33 33
       33 33 33 33 33 33
       33 33
 02AF  33 33 33 33 33 33				DB '333333333333333333336666C6C66666CCC666CC3333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       43 36 43 36 36 36
       36 36 43 43 43 36
       36 36 43 43 33 33
       33 33 33 33 33 33
       33 33
 02E1  33 33 33 33 33 33				DB '333333666333333333666C6C6CCC6666CCC6666C6333333333'
       36 36 36 33 33 33
       33 33 33 33 33 33
       36 36 36 43 36 43
       36 43 43 43 36 36
       36 36 43 43 43 36
       36 36 36 43 36 33
       33 33 33 33 33 33
       33 33
 0313  33 33 33 33 36 36				DB '333366CCC666666666C6CCCCCCCCC6666C6633636333333333'
       43 43 43 36 36 36
       36 36 36 36 36 36
       43 36 43 43 43 43
       43 43 43 43 43 36
       36 36 36 43 36 36
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0345  33 33 33 36 43 43				DB '3336CCCCCCCCCCCC6C6CCCCCC6CCCC666C6333636333333333'
       43 43 43 43 43 43
       43 43 43 43 36 43
       36 43 43 43 43 43
       43 36 43 43 43 43
       36 36 36 43 36 33
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0377  33 33 36 43 33 33				DB '336C333333CCCCCCCCCCCCCCCC6CCC666C3333333333333333'
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 36 43 43 43
       36 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 03A9  33 36 43 33 33 33				DB '36C3333333333666CCCC66666666CC66663333333333333333'
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 36 36 36 36
       36 36 36 36 43 43
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 03DB  33 43 33 33 33 33				DB '3C3333333333333366663333336CC666663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 33 33 33 33
       33 33 36 43 43 36
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 040D  33 33 33 33 33 33				DB '33333333333333333333333333CC666C663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 43 43 36 36
       36 43 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 043F  33 33 33 33 33 33				DB '3333333333333333333333333CC666C6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 43 43 36 36 36
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0471  33 33 33 33 33 33				DB '333333333333333333333333CC663CC6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 43 36 36 33 43
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 04A3  33 33 33 33 33 33				DB '333333333333333333333333C6633C66333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 43
       36 36 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 04D5  33 33 33 33 33 33				DB '333333333333333333333333C6633C66C33333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 43
       36 36 43 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0507  33 33 33 33 33 33				DB '333333333333333333333333C6633366C33333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       36 36 43 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0539  33 33 33 33 33 33				DB '333333333333333333333333C66333366C3333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       33 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 056B  33 33 33 33 33 33				DB '3333333333333333333333336666F33666CF33333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 36 46 33
       33 36 36 36 43 46
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 059D  33 33 33 33 33 33				DB '333333333333333333333333366FFF3666FFF3333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 46 46 46
       33 36 36 36 46 46
       46 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 05CF  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0601  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0633  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
				
 0665 33 33 33 33 33 33			duckDino DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0697  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 06C9  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 06FB  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 072D  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 075F  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0791  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 07C3  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 07F5  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0827  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0859  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 088B  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 08BD  33 33 33 33 33 33			 	 DB '33333333333333333333333333333333333333366666333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 36 36 36
       36 36 33 33 33 33
       33 33
 08EF  33 33 33 33 33 33				 DB '3333333333333333333333333333333333333366664E66CC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       34 45 36 36 43 43
       33 33
 0921  33 33 33 33 33 33				 DB '3333333333333333333333333333333333333666CCCCCCCC63'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 43 43 43 43
       36 33
 0953  33 33 33 33 33 33				 DB '333333333333333333333333333333333333666CCC4F4CCCC3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 43 43 43
       34 46 34 43 43 43
       43 33
 0985  33 33 33 33 33 33				 DB '3333333333333333333333333333333366666C6CCCC4F3F3F3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 43 36 43 43 43
       43 34 46 33 46 33
       46 33
 09B7  33 33 33 33 33 33				 DB '33333333333333333333333333333336666C6CCCCCCCC43F33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 43 43 43 43 43
       43 43 43 34 33 46
       33 33
 09E9  33 33 33 33 33 33				 DB '333333333333333333333333336666666C6CCCCC63CCCCCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 36 36 43 36 43
       43 43 43 43 36 33
       43 43 43 43 43 43
       33 33
 0A1B  33 33 33 33 33 33				 DB '33333333333333333333333336666C66C6CCCCC633333CCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 36 43 36 43 43
       43 43 43 36 33 33
       33 33 33 43 43 43
       33 33
 0A4D  33 33 33 33 33 33				 DB '33333333333333333333336666666666CCCCCCC33333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 36 36 36 36
       36 36 43 43 43 43
       43 43 43 33 33 33
       33 33 33 33 33 33
       33 33
 0A7F  33 33 33 33 33 33				 DB '333333333333333333336666C6C66666CCC666CC3333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       43 36 43 36 36 36
       36 36 43 43 43 36
       36 36 43 43 33 33
       33 33 33 33 33 33
       33 33
 0AB1  33 33 33 33 33 33				 DB '333333666333333333666C6C6CCC6666CCC6666C6333333333'
       36 36 36 33 33 33
       33 33 33 33 33 33
       36 36 36 43 36 43
       36 43 43 43 36 36
       36 36 43 43 43 36
       36 36 36 43 36 33
       33 33 33 33 33 33
       33 33
 0AE3  33 33 33 33 36 36				 DB '333366CCC666666666C6CCCCCCCCC6666C6633636333333333'
       43 43 43 36 36 36
       36 36 36 36 36 36
       43 36 43 43 43 43
       43 43 43 43 43 36
       36 36 36 43 36 36
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0B15  33 33 33 36 43 43				 DB '3336CCCCCCCCCCCC6C6CCCCCC6CCCC666C6333636333333333'
       43 43 43 43 43 43
       43 43 43 43 36 43
       36 43 43 43 43 43
       43 36 43 43 43 43
       36 36 36 43 36 33
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0B47  33 33 36 43 33 33				 DB '336C333333CCCCCCCCCCCCCCCC6CCC666C3333333333333333'
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 36 43 43 43
       36 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0B79  33 36 43 33 33 33				 DB '36C3333333333666CCCC66666666CC66663333333333333333'
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 36 36 36 36
       36 36 36 36 43 43
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0BAB  33 43 33 33 33 33				 DB '3C3333333333333366663333336CC666663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 33 33 33 33
       33 33 36 43 43 36
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0BDD  33 33 33 33 33 33				 DB '33333333333333333333333333CC666C663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 43 43 36 36
       36 43 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0C0F  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0C41  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0C73  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
							
 0CA5 33 33 33 33 33 33			Dino1 	DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0CD7  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0D09  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0D3B  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 0D6D  33 33 33 33 33 33				DB '33333333333333333333333333333333333333366666333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 36 36 36
       36 36 33 33 33 33
       33 33
 0D9F  33 33 33 33 33 33				DB '3333333333333333333333333333333333333366664E66CC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       34 45 36 36 43 43
       33 33
 0DD1  33 33 33 33 33 33				DB '3333333333333333333333333333333333333666CCCCCCCC63'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 43 43 43 43
       36 33
 0E03  33 33 33 33 33 33				DB '333333333333333333333333333333333333666CCC4F4CCCC3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 43 43 43
       34 46 34 43 43 43
       43 33
 0E35  33 33 33 33 33 33				DB '3333333333333333333333333333333366666C6CCCC4F3F3F3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 43 36 43 43 43
       43 34 46 33 46 33
       46 33
 0E67  33 33 33 33 33 33				DB '33333333333333333333333333333336666C6CCCCCCCC43F33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 43 43 43 43 43
       43 43 43 34 33 46
       33 33
 0E99  33 33 33 33 33 33				DB '333333333333333333333333336666666C6CCCCC63CCCCCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 36 36 43 36 43
       43 43 43 43 36 33
       43 43 43 43 43 43
       33 33
 0ECB  33 33 33 33 33 33				DB '33333333333333333333333336666C66C6CCCCC633333CCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 36 43 36 43 43
       43 43 43 36 33 33
       33 33 33 43 43 43
       33 33
 0EFD  33 33 33 33 33 33				DB '33333333333333333333336666666666CCCCCCC33333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 36 36 36 36
       36 36 43 43 43 43
       43 43 43 33 33 33
       33 33 33 33 33 33
       33 33
 0F2F  33 33 33 33 33 33				DB '333333333333333333336666C6C66666CCC666CC3333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       43 36 43 36 36 36
       36 36 43 43 43 36
       36 36 43 43 33 33
       33 33 33 33 33 33
       33 33
 0F61  33 33 33 33 33 33				DB '333333666333333333666C6C6CCC6666CCC6666C6333333333'
       36 36 36 33 33 33
       33 33 33 33 33 33
       36 36 36 43 36 43
       36 43 43 43 36 36
       36 36 43 43 43 36
       36 36 36 43 36 33
       33 33 33 33 33 33
       33 33
 0F93  33 33 33 33 36 36				DB '333366CCC666666666C6CCCCCCCCC6666C6633636333333333'
       43 43 43 36 36 36
       36 36 36 36 36 36
       43 36 43 43 43 43
       43 43 43 43 43 36
       36 36 36 43 36 36
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0FC5  33 33 33 36 43 43				DB '3336CCCCCCCCCCCC6C6CCCCCC6CCCC666C6333636333333333'
       43 43 43 43 43 43
       43 43 43 43 36 43
       36 43 43 43 43 43
       43 36 43 43 43 43
       36 36 36 43 36 33
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 0FF7  33 33 36 43 33 33				DB '336C333333CCCCCCCCCCCCCCCC6CCC666C3333333333333333'
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 36 43 43 43
       36 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1029  33 36 43 33 33 33				DB '36C3333333333666CCCC66666666CC66663333333333333333'
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 36 36 36 36
       36 36 36 36 43 43
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 105B  33 43 33 33 33 33				DB '3C3333333333333366663333336CC666663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 33 33 33 33
       33 33 36 43 43 36
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 108D  33 33 33 33 33 33				DB '33333333333333333333333333CC666C663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 43 43 36 36
       36 43 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 10BF  33 33 33 33 33 33				DB '3333333333333333333333333CC666C6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 43 43 36 36 36
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 10F1  33 33 33 33 33 33				DB '333333333333333333333333CC663CC6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 43 36 36 33 43
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1123  33 33 33 33 33 33				DB '333333333333333333333333C663333C666C33333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       33 43 36 36 36 43
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1155  33 33 33 33 33 33				DB '333333333333333333333333C6633333C66CF3333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       33 33 43 36 36 43
       46 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1187  33 33 33 33 33 33				DB '333333333333333333333333C66333333666FFF33333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       33 33 33 36 36 36
       46 46 46 33 33 33
       33 33 33 33 33 33
       33 33
 11B9  33 33 33 33 33 33				DB '333333333333333333333333C6633333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 11EB  33 33 33 33 33 33				DB '3333333333333333333333336666F333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 36 46 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 121D  33 33 33 33 33 33				DB '333333333333333333333333366FFF33333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 46 46 46
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 124F  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1281  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 12B3  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
							
 12E5 33 33 33 33 33 33			 Dino2 	DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1317  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1349  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 137B  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 13AD  33 33 33 33 33 33				DB '33333333333333333333333333333333333333366666333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 36 36 36
       36 36 33 33 33 33
       33 33
 13DF  33 33 33 33 33 33				DB '3333333333333333333333333333333333333366664E66CC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       34 45 36 36 43 43
       33 33
 1411  33 33 33 33 33 33				DB '3333333333333333333333333333333333333666CCCCCCCC63'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 43 43 43 43
       36 33
 1443  33 33 33 33 33 33				DB '333333333333333333333333333333333333666CCC4F4CCCC3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       36 36 36 43 43 43
       34 46 34 43 43 43
       43 33
 1475  33 33 33 33 33 33				DB '3333333333333333333333333333333366666C6CCCC4F3F3F3'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 43 36 43 43 43
       43 34 46 33 46 33
       46 33
 14A7  33 33 33 33 33 33				DB '33333333333333333333333333333336666C6CCCCCCCC43F33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 43 43 43 43 43
       43 43 43 34 33 46
       33 33
 14D9  33 33 33 33 33 33				DB '333333333333333333333333336666666C6CCCCC63CCCCCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       36 36 36 43 36 43
       43 43 43 43 36 33
       43 43 43 43 43 43
       33 33
 150B  33 33 33 33 33 33				DB '33333333333333333333333336666C66C6CCCCC633333CCC33'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 36 43
       36 36 43 36 43 43
       43 43 43 36 33 33
       33 33 33 43 43 43
       33 33
 153D  33 33 33 33 33 33				DB '33333333333333333333336666666666CCCCCCC33333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 36 36 36 36
       36 36 43 43 43 43
       43 43 43 33 33 33
       33 33 33 33 33 33
       33 33
 156F  33 33 33 33 33 33				DB '333333333333333333336666C6C66666CCC666CC3333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 36 36
       43 36 43 36 36 36
       36 36 43 43 43 36
       36 36 43 43 33 33
       33 33 33 33 33 33
       33 33
 15A1  33 33 33 33 33 33				DB '333333666333333333666C6C6CCC6666CCC6666C6333333333'
       36 36 36 33 33 33
       33 33 33 33 33 33
       36 36 36 43 36 43
       36 43 43 43 36 36
       36 36 43 43 43 36
       36 36 36 43 36 33
       33 33 33 33 33 33
       33 33
 15D3  33 33 33 33 36 36				DB '333366CCC666666666C6CCCCCCCCC6666C6633636333333333'
       43 43 43 36 36 36
       36 36 36 36 36 36
       43 36 43 43 43 43
       43 43 43 43 43 36
       36 36 36 43 36 36
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 1605  33 33 33 36 43 43				DB '3336CCCCCCCCCCCC6C6CCCCCC6CCCC666C6333636333333333'
       43 43 43 43 43 43
       43 43 43 43 36 43
       36 43 43 43 43 43
       43 36 43 43 43 43
       36 36 36 43 36 33
       33 33 36 33 36 33
       33 33 33 33 33 33
       33 33
 1637  33 33 36 43 33 33				DB '336C333333CCCCCCCCCCCCCCCC6CCC666C3333333333333333'
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 36 43 43 43
       36 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1669  33 36 43 33 33 33				DB '36C3333333333666CCCC66666666CC66663333333333333333'
       33 33 33 33 33 33
       33 36 36 36 43 43
       43 43 36 36 36 36
       36 36 36 36 43 43
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 169B  33 43 33 33 33 33				DB '3C3333333333333366663333336CC666663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 36
       36 36 33 33 33 33
       33 33 36 43 43 36
       36 36 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 16CD  33 33 33 33 33 33				DB '33333333333333333333333333CC666C663333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 43 43 36 36
       36 43 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 16FF  33 33 33 33 33 33				DB '3333333333333333333333333CC666C6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 43 43 36 36 36
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1731  33 33 33 33 33 33				DB '333333333333333333333333CC663CC6633333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 43 36 36 33 43
       43 36 36 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1763  33 33 33 33 33 33				DB '333333333333333333333333C6633C66333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 36 36 33 33 43
       36 36 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 1795  33 33 33 33 33 33				DB '3333333333333333333333333C663C66C33333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 43 36 36 33 43
       36 36 43 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 17C7  33 33 33 33 33 33				DB '3333333333333333333333333366FF66C33333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 46 46
       36 36 43 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 17F9  33 33 33 33 33 33				DB '333333333333333333333333333333366C3333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 43 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 182B  33 33 33 33 33 33				DB '3333333333333333333333333333333666CF33333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 43 46
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 185D  33 33 33 33 33 33				DB '3333333333333333333333333333333666FFF3333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 36 36 36 46 46
       46 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 188F  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 18C1  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 18F3  33 33 33 33 33 33				DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
							
							
				
 1925 33 33 33 33 33 33		   Drago	db '3333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1950  33 33 33 33 33 33				db '3333333333333333333333333337733333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 37 37 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 197B  33 33 33 33 33 33				db '3333333333333333333333333375333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 37 35 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 19A6  33 33 33 33 33 33				db '3333333333333333333333333757333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 37 35 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 19D1  33 33 33 33 33 33				db '3333333333333333333333337567333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       37 35 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 19FC  33 33 33 33 33 33				db '3333333333333333333333375567333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 37
       35 35 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1A27  33 33 33 33 33 33				db '3333333333333333333333375566773333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 37
       35 35 36 36 37 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1A52  33 33 33 33 33 33				db '3333333333333333333333755446667733333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 35
       35 34 34 36 36 36
       37 37 33 33 33 33
       33 33 33 33 33 33
       33
 1A7D  33 33 33 33 33 33				db '3333333333333333333333754444673333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 35
       34 34 34 34 36 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1AA8  33 33 33 33 33 33				db '3333333333333333333333754756733333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 35
       34 37 35 36 37 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1AD3  33 33 33 33 33 33				db '3333333333333333343333757566333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 34
       33 33 33 33 37 35
       37 35 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1AFE  33 33 33 33 33 33				db '3333333333333333773437575467333333333333333'
       33 33 33 33 33 33
       33 33 33 33 37 37
       33 34 33 37 35 37
       35 34 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1B29  33 33 33 33 33 33				db '3333333333333411747737754467333333333333333'
       33 33 33 33 33 33
       33 34 31 31 37 34
       37 37 33 37 37 35
       34 34 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1B54  33 33 33 33 33 33				db '3333333333344131777377544467333333333333333'
       33 33 33 33 33 34
       34 31 33 31 37 37
       37 33 37 37 35 34
       34 34 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1B7F  33 33 33 33 33 33				db '3333333333311447443375777767333333333333333'
       33 33 33 33 33 31
       31 34 34 37 34 34
       33 33 37 35 37 37
       37 37 36 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1BAA  33 33 33 33 33 33				db '3333333336333137643375555566773333333333333'
       33 33 33 36 33 33
       33 31 33 37 36 34
       33 33 37 35 35 35
       35 35 36 36 37 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1BD5  33 33 33 33 33 33				db '3333336666661333464774555677333333333333333'
       36 36 36 36 36 36
       31 33 33 33 34 36
       34 37 37 34 35 35
       35 36 37 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1C00  33 33 33 33 36 36				db '3333666666633333366474456733333333333333333'
       36 36 36 36 36 33
       33 33 33 33 33 36
       36 34 37 34 34 35
       36 37 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1C2B  33 33 33 33 36 36				db '3333666666633333336444573333333333333333333'
       36 36 36 36 36 33
       33 33 33 33 33 33
       36 34 34 34 35 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1C56  33 33 33 33 33 36				db '3333366666333333336445733333333333333333333'
       36 36 36 36 33 33
       33 33 33 33 33 33
       36 34 34 35 37 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1C81  33 33 33 33 33 33				db '3333333333333333377445773333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 37
       37 34 34 35 37 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1CAC  33 33 33 33 33 33				db '3333333333333333344666557333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 34
       34 36 36 36 35 35
       37 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1CD7  33 33 33 33 33 33				db '3333333333333333647376745733333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 34
       37 33 37 36 37 34
       35 37 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1D02  33 33 33 33 33 33				db '3333333333333333633377647473333333333333333'
       33 33 33 33 33 33
       33 33 33 33 36 33
       33 33 37 37 36 34
       37 34 37 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1D2D  33 33 33 33 33 33				db '3333333333333333733337473577333333333333333'
       33 33 33 33 33 33
       33 33 33 33 37 33
       33 33 33 37 34 37
       33 35 37 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1D58  33 33 33 33 33 33				db '3333333333333333333333743467733333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 34
       33 34 36 37 37 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1D83  33 33 33 33 33 33				db '3333333333333333333333743357333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 34
       33 33 35 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1DAE  33 33 33 33 33 33				db '3333333333333333333333743347733333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 37 34
       33 33 34 37 37 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1DD9  33 33 33 33 33 33				db '3333333333333333333337633347333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 37 36 33
       33 33 34 37 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1E04  33 33 33 33 33 33				db '3333333333333333333336333673373333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 36 33 33
       33 36 37 33 33 37
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1E2F  33 33 33 33 33 33				db '3333333333333333333333333573753333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 35 37 33 37 35
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1E5A  33 33 33 33 33 33				db '3333333333333333333333333367633333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 37 36 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1E85  33 33 33 33 33 33				db '3333333333333333333333333366333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 36 36 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1EB0  33 33 33 33 33 33				db '3333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
 1EDB  33 33 33 33 33 33				db '3333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33
				
				
				
 1F06 30 30 30 30 30 30			Dalpha  DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 1F38  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 1F6A  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 1F9C  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 1FCE  30 30 30 30 30 30				DB '0000003333333333333333333333333333C000000000000000'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2000  30 30 30 30 30 30				DB '00000033333333333333333333333333333C00000000000000'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 43
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2032  30 30 30 30 30 30				DB '000000333333333333333333333333333333C0000000000000'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2064  30 30 30 30 30 30				DB '000000333333CCCCCCCCCCCCCCCCCCCC33333C000000000000'
       33 33 33 33 33 33
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 33 33 33 33
       33 43 30 30 30 30
       30 30 30 30 30 30
       30 30
 2096  30 30 30 30 30 30				DB '000000333333CCC0000000000000000CC33333C00000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 43 43 33 33 33
       33 33 43 30 30 30
       30 30 30 30 30 30
       30 30
 20C8  30 30 30 30 30 30				DB '000000333333CCC00000000000000000CC33333C0000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 43 43 33 33
       33 33 33 43 30 30
       30 30 30 30 30 30
       30 30
 20FA  30 30 30 30 30 30				DB '000000333333CCC000000000000000000CC33333C000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 43 43 33
       33 33 33 33 43 30
       30 30 30 30 30 30
       30 30
 212C  30 30 30 30 30 30				DB '000000333333CCC0000000000000000000CC33333C00000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 43 43
       33 33 33 33 33 43
       30 30 30 30 30 30
       30 30
 215E  30 30 30 30 30 30				DB '000000333333CCC00000000000000000000CC33333C0000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       43 33 33 33 33 33
       43 30 30 30 30 30
       30 30
 2190  30 30 30 30 30 30				DB '000000333333CCC000000000000000000000CC33333C000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 33 33 33 33
       33 43 30 30 30 30
       30 30
 21C2  30 30 30 30 30 30				DB '000000333333CCC0000000000000000000000CC33333C00000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 43 43 33 33 33
       33 33 43 30 30 30
       30 30
 21F4  30 30 30 30 30 30				DB '000000333333CCC000000000000000000000CC333333C00000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 33 33 33 33
       33 33 43 30 30 30
       30 30
 2226  30 30 30 30 30 30				DB '000000333333CCC00000000000000000000CC3333333C00000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       43 33 33 33 33 33
       33 33 43 30 30 30
       30 30
 2258  30 30 30 30 30 30				DB '000000333333CCC0000000000000000000CC3333333C000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 43 43
       33 33 33 33 33 33
       33 43 30 30 30 30
       30 30
 228A  30 30 30 30 30 30				DB '000000333333CCC000000000000000000CC3333333C0000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 43 43 33
       33 33 33 33 33 33
       43 30 30 30 30 30
       30 30
 22BC  30 30 30 30 30 30				DB '000000333333CCC00000000000000000CC3333333C00000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 43 43 33 33
       33 33 33 33 33 43
       30 30 30 30 30 30
       30 30
 22EE  30 30 30 30 30 30				DB '000000333333CCC0000000000000000CC3333333C000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 43 43 33 33 33
       33 33 33 33 43 30
       30 30 30 30 30 30
       30 30
 2320  30 30 30 30 30 30				DB '000000333333CCC000000000000000CC3333333C0000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 33 33 33 33
       33 33 33 43 30 30
       30 30 30 30 30 30
       30 30
 2352  30 30 30 30 30 30				DB '000000333333CCC00000000000000CC3333333C00000000000'
       33 33 33 33 33 33
       43 43 43 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       43 33 33 33 33 33
       33 33 43 30 30 30
       30 30 30 30 30 30
       30 30
 2384  30 30 30 30 30 30				DB '000000333333CCCCCCCCCCCCCCCCCC3333333C000000000000'
       33 33 33 33 33 33
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       33 33 33 33 33 33
       33 43 30 30 30 30
       30 30 30 30 30 30
       30 30
 23B6  30 30 30 30 30 30				DB '000000333333333333333333333333333333C0000000000000'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       43 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 23E8  30 30 30 30 30 30				DB '00000033333333333333333333333333333C00000000000000'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 43
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 241A  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 244C  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 247E  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
				
 24B0 30 30 30 30 30 30			Nalpha  DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 24E2  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2514  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2546  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2578  30 30 30 30 30 30				DB '000000033333333000000000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 25AA  30 30 30 30 30 30				DB '000000033333333300000000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 33 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 25DC  30 30 30 30 30 30				DB '000000033333333330000000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 260E  30 30 30 30 30 30				DB '000000033333333333000000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 33 33 33
       30 30 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2640  30 30 30 30 30 30				DB '000000033333333333300000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 33 33 33
       33 30 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2672  30 30 30 30 30 30				DB '000000033333333333330000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 33 33 33 33 33
       33 33 30 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 26A4  30 30 30 30 30 30				DB '0000000333333C3333333000000000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 26D6  30 30 30 30 30 30				DB '0000000333333CC333333300000000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 33 33 33
       33 33 33 33 30 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2708  30 30 30 30 30 30				DB '0000000333333CCC33333330000000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 33 33
       33 33 33 33 33 30
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 273A  30 30 30 30 30 30				DB '0000000333333CCCC3333333000000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 43 33
       33 33 33 33 33 33
       30 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 276C  30 30 30 30 30 30				DB '0000000333333CCCCC333333300000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 43 43
       33 33 33 33 33 33
       33 30 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 279E  30 30 30 30 30 30				DB '0000000333333CCC0CC33333330000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 43
       43 33 33 33 33 33
       33 33 30 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 27D0  30 30 30 30 30 30				DB '0000000333333CCC00CC3333333000CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       43 43 33 33 33 33
       33 33 33 30 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2802  30 30 30 30 30 30				DB '0000000333333CCC000CC333333300CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 43 43 33 33 33
       33 33 33 33 30 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2834  30 30 30 30 30 30				DB '0000000333333CCC0000CC33333330CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 43 43 33 33
       33 33 33 33 33 30
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2866  30 30 30 30 30 30				DB '0000000333333CCC00000CC3333333CCC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 43 43 33
       33 33 33 33 33 33
       43 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2898  30 30 30 30 30 30				DB '0000000333333CCC000000CC3333333CC33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 43 43
       33 33 33 33 33 33
       33 43 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 28CA  30 30 30 30 30 30				DB '0000000333333CCC0000000CC3333333C33333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 30 43
       43 33 33 33 33 33
       33 33 43 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 28FC  30 30 30 30 30 30				DB '0000000333333CCC00000000CC333333333333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 30 30
       43 43 33 33 33 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 292E  30 30 30 30 30 30				DB '0000000333333CCC000000000CC33333333333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 30 30
       30 43 43 33 33 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2960  30 30 30 30 30 30				DB '0000000333333CCC0000000000CC3333333333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 30 30
       30 30 43 43 33 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2992  30 30 30 30 30 30				DB '0000000333333CCC00000000000CC333333333300000000000'
       30 33 33 33 33 33
       33 43 43 43 30 30
       30 30 30 30 30 30
       30 30 30 43 43 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 29C4  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 29F6  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2A28  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
				
 2A5A 30 30 30 30 30 30			Oalpha  DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2A8C  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2ABE  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2AF0  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2B22  30 30 30 30 30 30				DB '00000000000033333333333333333333333333300000000000'
       30 30 30 30 30 30
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2B54  30 30 30 30 30 30				DB '00000000000333333333333333333333333333330000000000'
       30 30 30 30 30 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 30 30
       30 30 30 30 30 30
       30 30
 2B86  30 30 30 30 30 30				DB '0000000000333333CCCCCCCCCCCCCCCCCCC333333000000000'
       30 30 30 30 33 33
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 33
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2BB8  30 30 30 30 30 30				DB '000000000033333CCC0000000000000000CC33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 43
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 43 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2BEA  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2C1C  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2C4E  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2C80  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2CB2  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2CE4  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2D16  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2D48  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2D7A  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2DAC  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2DDE  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2E10  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2E42  30 30 30 30 30 30				DB '000000000033333CC000000000000000000C33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2E74  30 30 30 30 30 30				DB '000000000033333CCC0000000000000000CC33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 43
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 43 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2EA6  30 30 30 30 30 30				DB '000000000033333CCCCCCCCCCCCCCCCCCCCC33333000000000'
       30 30 30 30 33 33
       33 33 33 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2ED8  30 30 30 30 30 30				DB '0000000000333333CCCCCCCCCCCCCCCCCCC333333000000000'
       30 30 30 30 33 33
       33 33 33 33 43 43
       43 43 43 43 43 43
       43 43 43 43 43 43
       43 43 43 43 43 33
       33 33 33 33 33 30
       30 30 30 30 30 30
       30 30
 2F0A  30 30 30 30 30 30				DB '00000000000333333333333333333333333333330000000000'
       30 30 30 30 30 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 30 30
       30 30 30 30 30 30
       30 30
 2F3C  30 30 30 30 30 30				DB '00000000000033333333333333333333333333300000000000'
       30 30 30 30 30 30
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 30 30 30
       30 30 30 30 30 30
       30 30
 2F6E  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2FA0  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
 2FD2  30 30 30 30 30 30				DB '00000000000000000000000000000000000000000000000000'
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30 30 30 30 30
       30 30
				
 3004 33 33 33 33 33 33		BushType1	 DB '333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 3022  33 33 33 33 33 33				 DB	'333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 3040  33 33 33 33 33 33				 DB	'333333333333322233333333333333'
       33 33 33 33 33 33
       33 32 32 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 305E  33 33 33 33 33 33				 DB	'333333333333266623333333333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 307C  33 33 33 33 33 33				 DB	'333333333333266623332333333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 33 32 33 33 33
       33 33 33 33 33 33
 309A  33 33 33 33 33 33				 DB	'333333333333266623326233333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 30B8  33 33 33 33 33 33				 DB	'333333333333266623326233333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 30D6  33 33 33 33 33 33				 DB	'333333333333266623326233333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 30F4  33 33 33 33 33 33				 DB	'333333332333266623326233333333'
       33 33 32 33 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 3112  33 33 33 33 33 33				 DB	'333333326233266623326233333333'
       33 32 36 32 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 3130  33 33 33 33 33 33				 DB	'333333326233266623326233333333'
       33 32 36 32 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 314E  33 33 33 33 33 33				 DB	'333333326233266623326233333333'
       33 32 36 32 33 33
       32 36 36 36 32 33
       33 32 36 32 33 33
       33 33 33 33 33 33
 316C  33 33 33 33 33 33				 DB	'333333326233266622266233333333'
       33 32 36 32 33 33
       32 36 36 36 32 32
       32 36 36 32 33 33
       33 33 33 33 33 33
 318A  33 33 33 33 33 33				 DB	'333333326233266622662333333333'
       33 32 36 32 33 33
       32 36 36 36 32 32
       36 36 32 33 33 33
       33 33 33 33 33 33
 31A8  33 33 33 33 33 33				 DB	'333333326233266622223333333333'
       33 32 36 32 33 33
       32 36 36 36 32 32
       32 32 33 33 33 33
       33 33 33 33 33 33
 31C6  33 33 33 33 33 33				 DB	'333333326233266623333333333333'
       33 32 36 32 33 33
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 31E4  33 33 33 33 33 33				 DB	'333333326222266623333333333333'
       33 32 36 32 32 32
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 3202  33 33 33 33 33 33				 DB	'333333332662266623333333333333'
       33 33 32 36 36 32
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 3220  33 33 33 33 33 33				 DB	'333333333222266623333333333333'
       33 33 33 32 32 32
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 323E  33 33 33 33 33 33				 DB	'333333333333266623333333333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 325C  33 33 33 33 33 33				 DB	'333333333333266623333333333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 327A  33 33 33 33 33 33				 DB	'333333333333266623333333333333'
       33 33 33 33 33 33
       32 36 36 36 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
 3298  33 33 33 33 33 33				 DB	'333333333333222223333333333333'
       33 33 33 33 33 33
       32 32 32 32 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
				
 32B6 33 33 33 33 33 33		BushType2	 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 32E8  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 331A  33 33 33 33 33 33				 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 334C  33 33 33 33 33 33			 	 DB '33333333333333333333333333333333333333333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 337E  33 33 33 33 33 33				 DB '33333333333322233333333333333333222333333333333333'
       33 33 33 33 33 33
       32 32 32 33 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33 32 32 32 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 33B0  33 33 33 33 33 33				 DB '33333333333266623333333333333332666233333333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 36 36 36 32
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 33E2  33 33 33 33 33 33				 DB '33333333333266623332333333323332666233333333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       33 32 33 33 33 33
       33 33 33 32 33 33
       33 32 36 36 36 32
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 3414  33 33 33 33 33 33				 DB '33333333333266623326233333262332666233323333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 33 32 33 33
       33 33 33 33 33 33
       33 33
 3446  33 33 33 33 33 33				 DB '33333333333266623326233333262332666233262333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 3478  33 33 33 33 33 33				 DB '33333333333266623326233333262332666233262333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 34AA  33 33 33 33 33 33				 DB '33333332333266623326233333262332666233262333333333'
       33 32 33 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 34DC  33 33 33 33 33 33				 DB '33333326233266623326233333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 350E  33 33 33 33 33 33				 DB '33333326233266623326233333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 3540  33 33 33 33 33 33				 DB '33333326233266623326233333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 33 33
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 3572  33 33 33 33 33 33				 DB '33333326233266622226233333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 32 32
       32 36 32 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 35A4  33 33 33 33 33 33				 DB '33333326233266622662333333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 32 36
       36 32 33 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 35D6  33 33 33 33 33 33				 DB '33333326233266622223333333262332666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 32 32
       32 33 33 33 33 33
       33 33 32 36 32 33
       33 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 3608  33 33 33 33 33 33				 DB '33333326233266623333333333326222666233262333333333'
       32 36 32 33 33 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 32 36 32
       32 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 363A  33 33 33 33 33 33				 DB '33333326222266623333333333332662666233262333333333'
       32 36 32 32 32 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 32 36
       36 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 366C  33 33 33 33 33 33				 DB '33333332662266623333333333333222666233262333333333'
       33 32 36 36 32 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 32
       32 32 36 36 36 32
       33 33 32 36 32 33
       33 33 33 33 33 33
       33 33
 369E  33 33 33 33 33 33				 DB '33333333222266623333333333333332666222623333333333'
       33 33 32 32 32 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 36 36 36 32
       32 32 36 32 33 33
       33 33 33 33 33 33
       33 33
 36D0  33 33 33 33 33 33				 DB '33333333333266623333333333333332666266233333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 36 36 36 32
       36 36 32 33 33 33
       33 33 33 33 33 33
       33 33
 3702  33 33 33 33 33 33				 DB '33333333333266623333333333333332666222333333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 36 36 36 32
       32 32 33 33 33 33
       33 33 33 33 33 33
       33 33
 3734  33 33 33 33 33 33				 DB '33333333333266623333333333333332666233333333333333'
       33 33 33 33 33 32
       36 36 36 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 36 36 36 32
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 3766  33 33 33 33 33 33				 DB '33333333333222223333333333333332222233333333333333'
       33 33 33 33 33 32
       32 32 32 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 32 32 32 32
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
 3798  33 33 33 33 33 33				 DB '33333333333222223333333333333332222233333333333333'
       33 33 33 33 33 32
       32 32 32 32 33 33
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 32 32 32 32 32
       33 33 33 33 33 33
       33 33 33 33 33 33
       33 33
				
 37CA 30 30 36 36 30 36			Heart 	 db '006606600'
       36 30 30
 37D3  30 36 34 34 36 34				 db '064464460'
       34 36 30
 37DC  36 34 37 34 34 34				 db '647444446'
       34 34 36
 37E5  36 34 34 34 34 34				 db '644444446'
       34 34 36
 37EE  36 35 34 34 34 34				 db '654444456'
       34 35 36
 37F7  30 36 35 34 34 34				 db '065444560'
       35 36 30
 3800  30 30 36 35 34 35				 db '006545600'
       36 30 30
 3809  30 30 30 36 35 36				 db '000656000'
       30 30 30
 3812  30 30 30 30 36 30				 db '000060000'
       30 30 30
				
 381B 33 33 37 33 33 33			Star1 	 db '337333373337333333'
       33 37 33 33 33 37
       33 33 33 33 33 33
 382D  33 37 37 37 33 33				 db '377733333777333333'
       33 33 33 37 37 37
       33 33 33 33 33 33
 383F  33 33 37 33 33 37				 db '337337333337333333'
       33 33 33 33 33 37
       33 33 33 33 33 33
 3851  33 33 33 33 37 37				 db '333377773333373333'
       37 37 33 33 33 33
       33 37 33 33 33 33
 3863  33 33 33 33 33 37				 db '333337733733777333'
       37 33 33 37 33 33
       37 37 37 33 33 33
 3875  33 33 33 33 33 33				 db '333333337773373333'
       33 33 37 37 37 33
       33 37 33 33 33 33
 3887  33 33 33 37 33 33				 db '333733333733333333'
       33 33 33 37 33 33
       33 33 33 33 33 33
 3899  33 33 37 37 37 33				 db '337773333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
 38AB  33 33 33 37 33 33				 db '333733333333333333'
       33 33 33 33 33 33
       33 33 33 33 33 33
				
 38BD 33 33 33 33 33 33			Clouds 	 db '3333333333333333777733333333'
       33 33 33 33 33 33
       33 33 33 33 37 37
       37 37 33 33 33 33
       33 33 33 33
 38D9  33 33 33 33 33 33				 db '3333333333333337444473333333'
       33 33 33 33 33 33
       33 33 33 37 34 34
       34 34 37 33 33 33
       33 33 33 33
 38F5  33 33 33 33 33 33				 db '3333333333777374444447333333'
       33 33 33 33 37 37
       37 33 37 34 34 34
       34 34 34 37 33 33
       33 33 33 33
 3911  33 33 33 33 33 33				 db '3333333337444744444444773333'
       33 33 33 37 34 34
       34 37 34 34 34 34
       34 34 34 34 37 37
       33 33 33 33
 392D  33 33 33 33 33 33				 db '3333333337444744444444447333'
       33 33 33 37 34 34
       34 37 34 34 34 34
       34 34 34 34 34 34
       37 33 33 33
 3949  33 33 33 33 33 33				 db '3333333374447444744444444733'
       33 33 37 34 34 34
       37 34 34 34 37 34
       34 34 34 34 34 34
       34 37 33 33
 3965  33 33 33 33 33 33				 db '3333333374447444744444444473'
       33 33 37 34 34 34
       37 34 34 34 37 34
       34 34 34 34 34 34
       34 34 37 33
 3981  33 33 33 33 33 33				 db '3333337744447447444444444473'
       37 37 34 34 34 34
       37 34 34 37 34 34
       34 34 34 34 34 34
       34 34 37 33
 399D  37 33 33 33 33 37				 db '7333374444444774444444444473'
       34 34 34 34 34 34
       34 37 37 34 34 34
       34 34 34 34 34 34
       34 34 37 33
 39B9  37 37 33 33 37 34				 db '7733744444444444444444477447'
       34 34 34 34 34 34
       34 34 34 34 34 34
       34 34 34 34 34 37
       37 34 34 37
 39D5  37 34 37 37 34 34				 db '7477444774444444444444744447'
       34 37 37 34 34 34
       34 34 34 34 34 34
       34 34 34 34 37 34
       34 34 34 37
 39F1  37 34 34 34 34 34				 db '7444447447444444444444744447'
       37 34 34 37 34 34
       34 34 34 34 34 34
       34 34 34 34 37 34
       34 34 34 37
 3A0D  33 37 34 34 34 34				 db '3744447444444444444444744447'
       37 34 34 34 34 34
       34 34 34 34 34 34
       34 34 34 34 37 34
       34 34 34 37
 3A29  33 33 37 34 34 34				 db '3374447444444444444444474473'
       37 34 34 34 34 34
       34 34 34 34 34 34
       34 34 34 34 34 37
       34 34 37 33
 3A45  33 33 33 37 34 34				 db '3337444744444447444444477733'
       34 37 34 34 34 34
       34 34 34 37 34 34
       34 34 34 34 34 37
       37 37 33 33
 3A61  33 33 33 33 37 37				 db '3333777374444473744444733333'
       37 33 37 34 34 34
       34 34 37 33 37 34
       34 34 34 34 37 33
       33 33 33 33
 3A7D  33 33 33 33 33 33				 db '3333333337447733374447333333'
       33 33 33 37 34 34
       37 37 33 33 33 37
       34 34 34 37 33 33
       33 33 33 33
 3A99  33 33 33 33 33 33				 db '3333333333773333337773333333'
       33 33 33 33 37 37
       33 33 33 33 33 33
       37 37 37 33 33 33
       33 33 33 33
				
				
 3AB5 63 6F 61 6C 46 69					 file db "coalFile.txt",0
       6C 65 2E 74 78 74
       00
 3AC2  1388 [						 buffer db 5000 DUP('$')
        24
       ]
 4E4A 54 69 6D 65 20 3A					 timeMessage DB 'Time :   ', '$'
       20 20 20 24
 4E54 00						 hour DB ?
 4E55 00						 min DB ?
 4E56 00						 sec DB ?
				
 4E57 44 61 74 65 20 3A					 dateMessage DB 'Date :   ', '$'
       20 20 20 24
 4E61 00						 day db ?
 4E62 00						 month db ?
 4E63 0000						 year dw ?
							 
 4E65 001E						 dinoX dw 30
 4E67 008A						 dinoY dw 138
 4E69 0668						 dragoX dw 1640
 4E6B 0073						 dragoY dw 115
 4E6D 0280						 bush1X dw 640
 4E6F 0091						 bush1Y dw 145
 4E71 03C0						 bush2X dw 960
 4E73 008E						 bush2Y dw 142
 4E75 00C8						 cloud1X dw 200
 4E77 003C						 cloud1Y dw 60
 4E79 0050						 cloud2X dw 80
 4E7B 0037						 cloud2Y dw 55
 4E7D 008C						 cloud3X dw 140
 4E7F 002D						 cloud3Y dw 45
 4E81 0032						 star1X dw 50
 4E83 003C						 star1Y dw 60
 4E85 0104						 star2X dw 260
 4E87 0046						 star2Y dw 70
 4E89 001E						 star3X dw 30
 4E8B 0046						 star3Y dw 70
 4E8D 0109						 star4X dw 265
 4E8F 0037						 star4Y dw 55
 4E91 0118						 star5X dw 280
 4E93 0046						 star5Y dw 70
 4E95 00E6						 heart1X dw 230
 4E97 00AF						 heart1Y dw 175
 4E99 00F5						 heart2X dw 245
 4E9B 00AF						 heart2Y dw 175
 4E9D 0104						 heart3X dw 260
 4E9F 00AF						 heart3Y dw 175
				
 4EA1 0000						 tempCloud1X dw ?
 4EA3 0000						 tempCloud2X dw ?
 4EA5 0000						 tempCloud3X dw ?
 4EA7 0000						 tempBush1X dw ?
 4EA9 0000						 tempBush2X dw ?
 4EAB 0000						 tempDragoX dw ?
 4EAD 0000						 buttonCheck dw 0
				
 4EAF 0003						 livesCount dw 3
 4EB1 0000						 scoreCounter dw 0
 4EB3 53 63 6F 72 65 20					 scoreBar db "Score :  "
       3A 20 20
				
 0000				.code
				
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;				  Function to Print Instructions					 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
				
 0000							displayInstructions proc
				
 0000  BA 3AB5 R							mov dx, offset file
 0003  B0 00								mov al, 0
 0005  B4 3D								mov ah, 3dh
 0007  CD 21								int 21h
				
 0009  8B D8								mov bx, ax
 000B  BA 3AC2 R							mov dx, offset buffer
 000E  B4 3F								mov ah, 3fh
 0010  CD 21								int 21h
				
									;string output
 0012  8D 16 3AC2 R							lea dx, buffer
 0016  B4 09								mov ah, 09h
 0018  CD 21								int 21h
				
 001A  E8 00AB								call newLine
				
 001D  BA 0000								mov dx, 0
 0020  8D 16 4E4A R							lea dx, timeMessage ;loading address of string
 0024  B4 09						 		mov ah, 09h 
 0026  CD 21								int 21h	
								;------------------ Getting System Time
				
 0028  B4 2C								mov ah, 2ch
 002A  CD 21								int 21h
				
 002C  88 2E 4E54 R							mov hour, ch	; ch contains hour
 0030  88 0E 4E55 R							mov min, cl  ; cl contains minutes
 0034  88 36 4E56 R							mov sec, dh  ; dh contains seconds
				
								;------------------ Displaying System Time
				
 0038  B8 0000								mov ax, 0
 003B  A0 4E54 R							mov al, hour
 003E  E8 0067								call display
				
 0041  B2 3A								mov dl, ':'
 0043  B4 02								mov ah, 02h
 0045  CD 21								int 21h
				
 0047  B8 0000								mov ax, 0
 004A  A0 4E55 R							mov al, min
 004D  E8 0058								call display
				
 0050  B2 3A								mov dl, ':'
 0052  B4 02								mov ah, 02h
 0054  CD 21								int 21h
				
 0056  B8 0000								mov ax, 0
 0059  A0 4E56 R							mov al, sec
 005C  E8 0049								call display
				
								;------------------ Getting System Date
				
 005F  E8 0066								call newLine
				
 0062  BA 0000								mov dx, 0
 0065  8D 16 4E57 R							lea dx, dateMessage ;loading address of string
 0069  B4 09						 		mov ah, 09h 
 006B  CD 21								int 21h	
				
				
 006D  B4 2A								mov ah, 2ah
 006F  CD 21								int 21h
				
 0071  89 0E 4E63 R							mov year, cx	; cx contains year
 0075  88 36 4E62 R							mov month, dh 	; dh contains month
 0079  88 16 4E61 R							mov day, dl  	; dl contains days
				
								;------------------ Displaying System Date
				
 007D  B8 0000								mov ax, 0
 0080  A0 4E61 R							mov al, day
 0083  E8 0022								call display
				
 0086  B2 2F								mov dl, '/'
 0088  B4 02								mov ah, 02h
 008A  CD 21								int 21h
				
 008C  B8 0000								mov ax, 0
 008F  A0 4E62 R							mov al, month
 0092  E8 0013								call display
				
 0095  B2 2F								mov dl, '/'
 0097  B4 02								mov ah, 02h
 0099  CD 21								int 21h
				
 009B  A1 4E63 R							mov ax, year
 009E  E8 0007								call display
 00A1  E8 0024								call newLine
 00A4  E8 0021								call newLine
									
 00A7  C3								ret
 00A8							displayInstructions endp
				
 00A8						   display proc       ;Beginning of procedure
 00A8  BB 000A						   MOV BX, 10      ;Initializes divisor
 00AB  BA 0000						   MOV DX, 0000H   ;Clears DX
 00AE  B9 0000						   MOV CX, 0000H   ;Clears CX
						    
								;_____________________________	
								;Splitting process starts here
								;=============================
 00B1								L11:  
 00B1  BA 0000							   MOV DX, 0000H    ;Clears DX during jump
 00B4  F7 F3							   div BX           ;Divides AX by BX
 00B6  52							   PUSH DX          ;Pushes DX(remainder) to stack
 00B7  41							   INC CX           ;Increments counter to track the number of digits
 00B8  83 F8 00							   CMP AX, 0        ;Checks if there is still something in AX to divide
 00BB  75 F4							   JNE L11           ;Jumps if AX is not zero
								    
 00BD								L22:  
 00BD  5A							   POP DX          ;Pops from stack to DX
 00BE  83 C2 30							   ADD DX, 30H     ;Converts to it's ASCII equivalent
 00C1  B4 02							   MOV AH, 02H     
 00C3  CD 21							   INT 21H         ;calls DOS to display character
 00C5  E2 F6							   LOOP L22         ;Loops till CX equals zero
 00C7  C3							   RET             ;returns control
 00C8							display  ENDP
				
 00C8							newLine Proc
 00C8  B2 0A							mov dl, 10 	;interupt for new line
 00CA  B4 02							mov ah, 02h
 00CC  CD 21							int 21h
 00CE  C3							ret
 00CF							newLine endp
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw DINASOUR						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawDino macro Xcord, Ycord
							local L1, Xcord,Ycord,step3,cont1
								mov ax, Xcord	; X coordinates
								mov dx, Ycord	; Y coordinates
								mov cx, 1600				;mov bx,ax				mov si,0				mov bx,0				;local L1				L1:
								push cx				mov cx,ax				sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel						mov al, dino[bx+si]						cmp dino[bx+si], 3						jne cont1
											mov al, 001100000b						cont1:
										mov ah, 0ch       						int 10h
									add dino[bx+si], '0'
									inc si					mov ax,cx					inc ax					cmp si,50			;if si==25 row change dino					jne step3;
								    mov ax, Xcord		;change this 
									mov si,0					add bx,50					inc dx					;local step3					step3:
															pop cx				Loop L1
							endm
				
							DrawDuckDino macro Xcord, Ycord
							local L1, Xcord,Ycord,step3,cont1
								mov ax, Xcord	; X coordinates
								mov dx, Ycord	; Y coordinates
								mov cx, 1600				;mov bx,ax				mov si,0				mov bx,0				;local L1				L1:
								push cx				mov cx,ax				sub duckDino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel						mov al, duckDino[bx+si]						cmp duckDino[bx+si], 3						jne cont1
											mov al, 001100000b						cont1:
										mov ah, 0ch       						int 10h
									add duckDino[bx+si], '0'
									inc si					mov ax,cx					inc ax					cmp si,50			;if si==25 row change dino					jne step3;
								    mov ax, Xcord		;change this 
									mov si,0					add bx,50					inc dx					;local step3					step3:
															pop cx				Loop L1
							endm
				
							remDino macro Xcord, Ycord
							local L1, Xcord,Ycord,step3,cont1
								mov ax, Xcord	; X coordinates
								mov dx, Ycord	; Y coordinates
								mov cx, 1600				;mov bx,ax				mov si,0				mov bx,0				;local L1				L1:
								push cx				mov cx,ax				sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel						mov al, 001100000b						cmp dino[bx+si], 3						jne cont1
											mov al, 001100000b						cont1:
										mov ah, 0ch       						int 10h
									add dino[bx+si], '0'
									inc si					mov ax,cx					inc ax					cmp si,50			;if si==25 row change dino					jne step3;
								    mov ax, Xcord		;change this 
									mov si,0					add bx,50					inc dx					;local step3					step3:
															pop cx				Loop L1
							endm
							
							DrawDino1 macro Xcord, Ycord
							local L1, Xcord,Ycord,step3,cont2
								mov ax, Xcord	; X coordinates
								mov dx, Ycord	; Y coordinates
								mov cx, 1600				;mov bx,ax				mov si,0				mov bx,0				;local L1				L1:
								push cx				mov cx,ax				sub dino1[bx+si], '0'		;if dino[bx+si]==1 then draw pixel						mov al, dino1[bx+si]						cmp dino1[bx+si], 3						jne cont2
											mov al, 001100000b						cont2:
										mov ah, 0ch       						int 10h
									add dino1[bx+si], '0'
									inc si					mov ax,cx					inc ax					cmp si,50			;if si==25 row change dino					jne step3;
								    mov ax, Xcord		;change this 
									mov si,0					add bx,50					inc dx					;local step3					step3:
															pop cx				Loop L1
							endm
							
							DrawDino2 macro Xcord, Ycord
							local L1, Xcord,Ycord,step3,loopAgain,cont3
								mov ax, Xcord	; X coordinates
								mov dx, Ycord	; Y coordinates
								mov cx, 1600				;mov bx,ax				mov si,0				mov bx,0				;local L1				L1:
								push cx				mov cx,ax				sub dino2[bx+si], '0'		;if dino[bx+si]==1 then draw pixel						mov al, dino2[bx+si]						cmp dino2[bx+si], 3						jne cont3
											mov al, 001100000b						cont3:
										mov ah, 0ch       						int 10h
									add dino2[bx+si], '0'
									inc si					mov ax,cx					inc ax					cmp si,50			;if si==25 row change dino					jne step3;
								    mov ax, Xcord		;change this 
									mov si,0					add bx,50					inc dx					;local step3					step3:
															pop cx				Loop L1
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw BushType1						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawBushType1 macro Xcord1, Ycord1
							local L2, Xcord1,Ycord1,Continue1,cont4							mov ax, Xcord1	; X co-ordinate
								mov dx, Ycord1	; Y co-ordinate
								mov cx, 690	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L2				L2:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub BushType1[bx+si],'0'	; to get a decimal number for color						mov al, BushType1[bx+si]	; array traversing						cmp BushType1[bx+si], 3						jne cont4
											mov al, 001100000b						cont4:
										mov ah, 0ch       			; interupt to draw pixel						int 10h
										add BushType1[bx+si],'0'   						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 30					; if si is 50 then change row						jne Continue1;				; if there is no need to change row
									    mov ax, Xcord1				; taking coloumn back to start
										mov si, 0					;						add bx,30					; going to next row of array						inc dx
									;local Continue1					Continue1:
															POP cx				Loop L2
							endm
				
							remBushType1 macro Xcord1, Ycord1
							local L2, Xcord1,Ycord1,Continue1
								mov ax, Xcord1	; X co-ordinate
								mov dx, Ycord1	; Y co-ordinate
								mov cx, 575		; size of array = 625				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L2				L2:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub BushType1[bx+si],'0'	; to get a decimal number for color						mov al, 001100000b	; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add BushType1[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 25					; if si is 25 then change row						jne Continue1;					; if there is no need to change row
									    mov ax, Xcord1				; taking coloumn back to start
										mov si, 0					;						add bx, 25					; going to next row of array						inc dx
									;local Continue1					Continue1:
															POP cx				Loop L2
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw BushType2						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawBushType2 macro Xcord2, Ycord2
							local L3, Xcord2,Ycord2,Continue2,cont5							mov ax, Xcord2	; X co-ordinate
								mov dx, Ycord2	; Y co-ordinate
								mov cx, 1300	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L3				L3:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub BushType2[bx+si],'0'	; to get a decimal number for color						mov al, BushType2[bx+si]	; array traversing						cmp BushType2[bx+si], 3						jne cont5
											mov al, 001100000b						cont5:
										mov ah, 0ch       			; interupt to draw pixel						int 10h
										add BushType2[bx+si],'0'   						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 50					; if si is 50 then change row						jne Continue2;				; if there is no need to change row
									    mov ax, Xcord2				; taking coloumn back to start
										mov si, 0					;						add bx, 50					; going to next row of array						inc dx
									;local Continue2					Continue2:
															POP cx				Loop L3
							endm
				
							remBushType2 macro Xcord2, Ycord2
							local L3, Xcord2,Ycord2,Continue2							mov ax, Xcord2	; X co-ordinate
								mov dx, Ycord2	; Y co-ordinate
								mov cx, 1300	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L3				L3:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub BushType2[bx+si],'0'	; to get a decimal number for color						mov al, 001100000b					; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h
										add BushType2[bx+si],'0'   						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 50					; if si is 50 then change row						jne Continue2;				; if there is no need to change row
									    mov ax, Xcord2				; taking coloumn back to start
										mov si, 0					;						add bx, 50					; going to next row of array						inc dx
									;local Continue2					Continue2:
															POP cx				Loop L3
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw D Alphabet						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawDaplha macro Xcord3, Ycord3
							local L4, Xcord3,Ycord3,Continue3
								mov ax, Xcord3	; X co-ordinate
								mov dx, Ycord3	; Y co-ordinate
								mov cx, 1450	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L4				L4:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Dalpha[bx+si], '0'		; to get a decimal number for color						mov al, Dalpha[bx+si]		; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Dalpha[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 50					; if si is 50 then change row						jne Continue3;				; if there is no need to change row
									    mov ax, Xcord3				; taking coloumn back to start
										mov si, 0					;						add bx, 50					; going to next row of array						inc dx
									;local Continue3					Continue3:
															POP cx				Loop L4
							endm
				
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw N Alphabet						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawNaplha macro Xcord4, Ycord4
							local L5, Xcord4,Ycord4,Continue4
								mov ax, Xcord4	; X co-ordinate
								mov dx, Ycord4	; Y co-ordinate
								mov cx, 1450	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L5				L5:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Nalpha[bx+si],'0'		; to get a decimal number for color						mov al, Nalpha[bx+si]		; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							    						add Nalpha[bx+si],'0' 						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 50					; if si is 50 then change row						jne Continue4;				; if there is no need to change row
									    mov ax, Xcord4				; taking coloumn back to start
										mov si, 0					;						add bx, 50					; going to next row of array						inc dx
									;local Continue4					Continue4:
															POP cx				Loop L5
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw O Alphabet						 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawOaplha macro Xcord5, Ycord5
							local L6, Xcord5,Ycord5,Continue5
								mov ax, Xcord5	; X co-ordinate
								mov dx, Ycord5	; Y co-ordinate
								mov cx, 1450	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L6				L6:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Oalpha[bx+si],'0'		; to get a decimal number for color						mov al, Oalpha[bx+si]		; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							    						add Oalpha[bx+si],'0' 						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 50					; if si is 50 then change row						jne Continue5;				; if there is no need to change row
									    mov ax, Xcord5				; taking coloumn back to start
										mov si, 0					;						add bx, 50					; going to next row of array						inc dx
									;local Continue5					Continue5:
															POP cx				Loop L6
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw Drago							 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawDrago macro Xcord6, Ycord6
							local L7, Xcord6,Ycord6,Continue6,cont6							mov ax, Xcord6	; X co-ordinate
								mov dx, Ycord6	; Y co-ordinate
								mov cx, 1505	; size of array = 1450				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L7				L7:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Drago[bx+si],'0'	; to get a decimal number for color						mov al, Drago[bx+si]	; array traversing						cmp Drago[bx+si], 3						jne cont6
											mov al, 001100000b						cont6:
										mov ah, 0ch       			; interupt to draw pixel						int 10h
										add Drago[bx+si],'0'   						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 43					; if si is 50 then change row						jne Continue6;				; if there is no need to change row
									    mov ax, Xcord6				; taking coloumn back to start
										mov si, 0					;						add bx, 43					; going to next row of array						inc dx
									;local Continue6					Continue6:
															POP cx				Loop L7
							endm
				
							remDrago macro Xcord6, Ycord6
							local L7, Xcord6,Ycord6,Continue6
								mov ax, Xcord6	; X co-ordinate
								mov dx, Ycord6	; Y co-ordinate
								mov cx, 1505		; size of array = 840				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L7				L7:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Drago[bx+si],'0'		; to get a decimal number for color						mov al, 001100000b		; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Drago[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 32					; if si is 50 then change row						jne Continue6;				; if there is no need to change row
									    mov ax, Xcord6				; taking coloumn back to start
										mov si, 0					;						add bx, 32					; going to next row of array						inc dx
									;local Continue6					Continue6:
															POP cx				Loop L7
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw Heart							 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawHeart macro Xcord7, Ycord7
							local L8, Xcord7,Ycord7,Continue7
								mov ax, Xcord7	; X co-ordinate
								mov dx, Ycord7	; Y co-ordinate
								mov cx, 81		; size of array = 81				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L8				L8:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Heart[bx+si],'0'	; to get a decimal number for color						mov al, Heart[bx+si]	; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Heart[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 9					; if si is 25 then change row						jne Continue7;					; if there is no need to change row
									    mov ax, Xcord7				; taking coloumn back to start
										mov si, 0					;						add bx, 9					; going to next row of array						inc dx
									;local Continue7					Continue7:
															POP cx				Loop L8
							endm
							remHeart macro Xcord7, Ycord7
							local L8, Xcord7,Ycord7,Continue7
								mov ax, Xcord7	; X co-ordinate
								mov dx, Ycord7	; Y co-ordinate
								mov cx, 81		; size of array = 81				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L8				L8:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Heart[bx+si],'0'	; to get a decimal number for color						mov al, 0	; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Heart[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 9					; if si is 25 then change row						jne Continue7;					; if there is no need to change row
									    mov ax, Xcord7				; taking coloumn back to start
										mov si, 0					;						add bx, 9					; going to next row of array						inc dx
									;local Continue7					Continue7:
															POP cx				Loop L8
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw Stars							 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawStars macro Xcord8, Ycord8
							local L9, Xcord8,Ycord8,Continue8,cont7
								mov ax, Xcord8	; X co-ordinate
								mov dx, Ycord8	; Y co-ordinate
								mov cx, 162		; size of array = 81				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L9				L9:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Star1[bx+si],'0'	; to get a decimal number for color						mov al, Star1[bx+si]	; array traversing						cmp Star1[bx+si], 3						jne cont7
											mov al, 001100000b						cont7:
										mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Star1[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 18					; if si is 25 then change row						jne Continue8;					; if there is no need to change row
									    mov ax, Xcord8				; taking coloumn back to start
										mov si, 0					;						add bx, 18					; going to next row of array						inc dx
									;local Continue8					Continue8:
															POP cx				Loop L9
							endm
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO to Draw Clouds							 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							DrawClouds macro Xcord9, Ycord9
							local L10, Xcord9,Ycord9,Continue9,cont8
								mov ax, Xcord9	; X co-ordinate
								mov dx, Ycord9	; Y co-ordinate
								mov cx, 504		; size of array = 81				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L10				L10:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Clouds[bx+si],'0'	; to get a decimal number for color						mov al, Clouds[bx+si]	; array traversing						cmp Clouds[bx+si], 3						jne cont8
											mov al, 001100000b						cont8:
										mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Clouds[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 28					; if si is 25 then change row						jne Continue9;					; if there is no need to change row
									    mov ax, Xcord9				; taking coloumn back to start
										mov si, 0					;						add bx, 28					; going to next row of array						inc dx
									;local Continue9					Continue9:
															POP cx				Loop L10
							endm
				
							remClouds macro Xcord9, Ycord9
							local L10, Xcord9,Ycord9,Continue9
								mov ax, Xcord9	; X co-ordinate
								mov dx, Ycord9	; Y co-ordinate
								mov cx, 504		; size of array = 81				mov si, 0 		; for indexing				mov bx, 0 		; for indexing
								;local L10				L10:
								PUSH cx
										mov cx,ax 					; moving X co-ordinate in cx for interupt						sub Clouds[bx+si],'0'	; to get a decimal number for color						mov al, 001100000b	; array traversing						mov ah, 0ch       			; interupt to draw pixel						int 10h							     						add Clouds[bx+si],'0'						inc si 						; to get next index	of array						mov ax,cx					; retrieving value from cx						inc ax						; increament in coloumn of drawing pixel						cmp si, 28					; if si is 25 then change row						jne Continue9;					; if there is no need to change row
									    mov ax, Xcord9				; taking coloumn back to start
										mov si, 0					;						add bx, 28					; going to next row of array						inc dx
									;local Continue9					Continue9:
															POP cx				Loop L10
							endm
				
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   MACRO for Gameplay							 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							scoreBarDisplay PROC
				
								mov cx , LENGTHOF scoreBar
								mov si, offset scoreBar
								mov dl, 11
								
								display212:
									push cx
										
										mov ax , 0
										mov ah,02h
										mov bh,0h
										mov dh, 22    ;setting cursor position for printing 
										int 10h
										
										mov al,[si]
										mov bh, 0h				;page number
										mov bl, 01110000b		;color
										mov cx, 1				;number of times to print character
										mov ah, 09h 			;write character at cursor position
										int 10h
										
										mov ah,02h
										inc dl
										inc si
										int 10h
										
										
									pop cx
								loop display212
				
								PUSH ax
								mov ax, 0
								mov ax, scoreCounter
								call display
								POP ax
								ret
							scoreBarDisplay endp
				
							collisionOfPlayer PROC
								PUSH cx
								PUSH ax
								PUSH dx
								PUSH bx
				
								mov bx, dinoX
								mov cx, dinoY
				
								mov ax, bush1X
								.IF AX >= BX && AX <= 80 && CX == 138
									dec livesCount
									remBushType1 bush1X,bush1Y
									sub bush1X, 160
								.ENDIF
				
								mov ax, bush2X
								.IF AX >= BX && AX <= 80 && CX == 138
									dec livesCount
									remBushType2 bush2X,bush2Y
									sub bush2X, 160
								.ENDIF
				
								mov ax, dragoX
								mov cx, buttonCheck
								.IF AX >= BX && AX <= 80 && CX != 2
									dec livesCount
									remDrago dragoX,dragoY
									sub dragoX, 160
								.ENDIF
				
				
								POP bx
								POP dx
								POP ax
								POP cx
							ret
							collisionOfPlayer endp
				
				
							movementOfPlayer PROC
									
									;repeat1:
										; checking keystroke
										mov ax, 0
										mov ah,01h
										int 16h
										jz exiting
				
										mov ah, 00h
										int 16h
				
										; AH = BIOS scan code
										cmp ah,48h
										je up
										cmp ah,4Bh
										je left
										cmp ah,4Dh
										je right
										cmp ah,50h
										je down
										cmp ah,1
										jmp exiting
									
									up:
										remDino dinoX,dinoY
										mov buttonCheck, 1
										jmp exiting
									down:
										remDino dinoX,dinoY
										mov buttonCheck, 2
										jmp exiting
									left:
										remDino dinoX,dinoY
										mov buttonCheck, 3
										
										jmp exiting
									right:
										remDino dinoX,dinoY
										mov buttonCheck, 4
									
									exiting:
				
									PUSH cx
									PUSH ax
									mov cx, buttonCheck
									mov ax, dinoY
									.IF CX == 1 && ax >= 85 ;Check for range
										sub ax, 3
										mov dinoY, ax
									.ENDIF
				
									.IF CX == 1 && ax <= 85 ;Check for range
										remDino dinoX,dinoY
										mov dinoY, 138
										mov ax, 0
										mov buttonCheck, ax
									.ENDIF
									POP ax
									POP cx
				
				
									PUSH cx
									mov cx, buttonCheck
									.IF CX == 2 && ax >= 138 ;Check for range
										DrawDuckDino dinoX,dinoY
									.ENDIF
									POP cx
				
				
									PUSH cx
									mov cx, buttonCheck
									.IF CX == 4 && ax >= 138 ;Check for range
										add dinoX, 1
										mov ax, 0
										mov buttonCheck, ax
									.ENDIF
									POP cx
				
									PUSH cx
									mov cx, buttonCheck
									.IF CX == 3 && ax >= 138 ;Check for range
										sub dinoX, 1
										mov ax, 0
										mov buttonCheck, ax
									.ENDIF
									POP cx
				
								ret
							movementOfPlayer endp
				
							playGameMac proc
				
				
										mov cx, dragoX
										.IF CX <= 300 	;Check for range
											DrawDrago dragoX, 115
										.ENDIF
				
										mov cx, bush1X
										.IF CX <= 300 	;Check for range
											DrawBushType1 bush1X, 145
										.ENDIF
				
										mov cx, bush2X
										.IF CX <= 300 	;Check for range
											DrawBushType2 bush2X, 142
										.ENDIF
				
													DrawClouds cloud1X, cloud1Y
													DrawClouds cloud2X, cloud2Y
													DrawClouds cloud3X, cloud3Y
				
													PUSH cx
													mov cx, livesCount
				
													cmp cx, 3
													je drawThree
													cmp cx, 2
													je drawTwo
													cmp cx, 1
													je drawOne
				
													remHeart heart1X,heart1Y
													mov ah, 4ch
													int 21h
				
													drawThree:
														DrawHeart heart1X,heart1Y
														DrawHeart heart2X,heart2Y
														DrawHeart heart3X,heart3Y
														jmp contPlay
				
													drawTwo:
														remHeart heart3X,heart3Y
														DrawHeart heart1X,heart1Y
														DrawHeart heart2X,heart2Y
														jmp contPlay
				
													drawOne:
														remHeart heart3X,heart3Y
														remHeart heart2X,heart2Y
														DrawHeart heart1X,heart1Y
				
													contPlay:
													POP cx
				
													DrawStars star1X, star1Y
													DrawStars star2X, star2Y
													DrawStars star3X, star3Y
													DrawStars star4X, star4Y
													DrawStars star5X, star5Y
				
				
												mov cx, buttonCheck
												.IF CX != 2 	;Check for range
													;remDino dinoX,dinoY
													DrawDino dinoX,dinoY
													;remDino dinoX,dinoY
													DrawDino1 dinoX,dinoY
													;remDino dinoX,dinoY
													DrawDino2 dinoX,dinoY
												.ENDIF
				
										call scoreBarDisplay
										inc scoreCounter
				
										call movementOfPlayer
				
										mov cx, bush1X
										.IF CX <= 0 	;Check for range
											remBushType1 bush1X,bush1Y
											mov cx, 640
											mov bush1X, cx
											mov bush1Y, 145
									   .ENDIF 
				
									   	mov cx, bush2X
										.IF CX <= 0 	;Check for range
											remBushType2 bush2X,bush2Y
											mov cx, 960
											mov bush2X, cx
											mov bush2Y, 142
									   .ENDIF 
				
									   	mov cx, dragoX
										.IF CX <= 0 	;Check for range
											remDrago dragoX,dragoY
											mov cx, 1640
											mov dragoX, cx
											mov dragoY, 115
									   .ENDIF 
				
									    call collisionOfPlayer
				
									   	sub dragoX, 8
										sub bush1X, 8
										sub bush2X, 8
				
								playGameMac endp
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;				  Function to Display GamePlay Screen				 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
						displayGameScreen proc
						;local drawLineLow,drawLineHigh
				
							mov ax, 0
							mov bx, 167
							mov cx, 640
							drawLineLow:
							PUSH cx
									mov cx, ax
									mov dx, bx
									PUSH ax
									mov al, 7
									mov ah, 0ch     ; interupt to draw pixel
									int 10h
									POP ax
									inc ax
							POP cx
							Loop drawLineLow
				
							;mov ax, 0
							;mov bx, 40
							;mov cx, 640
							;drawLineHigh:
							;PUSH cx
									;mov cx, ax
									;mov dx, bx
									;PUSH ax
									;mov al, 7
									;mov ah, 0ch      ; interupt to draw pixel
									;int 10h
									;POP ax
									;inc ax
							;POP cx
							;Loop drawLineHigh
				
							mov cx, 1
							loopPlay:
							PUSH cx
				
								call playGameMac
				
							POP cx
							inc cx
							Loop loopPlay
							
				
						ret
						displayGameScreen endp
				
				
				
				
						;---------------------------------------------------------------------
						;;																	 ;;
						;;					   Main Function					        	 ;;		
						;;																	 ;;
						;---------------------------------------------------------------------
				
							main proc
								mov ax,@data
								mov ds,ax
								
								mov al, 13h
								mov ah, 0   ; set graphics video mode.
								int 10h 
				
				
								DrawDaplha 60,20
								DrawDino 110,20
								DrawNaplha 160,20
								DrawOaplha 200,20
				
								call options
								call options
				
								mov ah,4ch
								int 21h
				main endp
							options proc
							;local display1, display2, display3, mouse
							;;;;;;;;;;;;;; WILL DISPPLAY PLAY GAME ;;;;;;;;;;;;;;;;;;;;
								mov cx , LENGTHOF playGame
								mov si,offset playGame
								mov dl,15
								
								display1:
									push cx
										
										mov ax , 0
										mov ah,02h
										mov bh,0h
										mov dh,10    ;setting cursor position for printing 
										int 10h
										
										mov al,[si]
										mov bh, 0h				;page number
										mov bl, 01110000b		;color
										mov cx, 1				;number of times to print character
										mov ah, 09h 			;write character at cursor position
										int 10h
										
										mov ah,02h
										inc dl
										inc si
										int 10h
										
										
									pop cx
								loop display1
								
							;;;;;;;;;;;;;; WILL DISPPLAY Instructions ;;;;;;;;;;;;;;;;;;;;
								mov cx , LENGTHOF instructions
								mov si,offset instructions
								mov dl,13
								
								display2:
									push cx
										
										mov ax , 0
										mov ah,02h
										mov bh,0h
										mov dh,15    ;setting cursor position for printing 
										int 10h
										
										mov al,[si]
										mov bh, 0h				;page number
										mov bl, 01110000b		;color
										mov cx, 1				;number of times to print character
										mov ah, 09h 			;write character at cursor position
										int 10h
										
										mov ah,02h
										inc dl
										inc si
										int 10h
										
										
									pop cx
								loop display2
								
								;;;;;;;;;;;;;; WILL DISPPLAY EXIT ;;;;;;;;;;;;;;;;;;;;
									mov cx , LENGTHOF exitStatement
									mov si,offset exitStatement
									mov dl,17
									
									display3:
										push cx
											
											mov ax , 0
											mov ah,02h
											mov bh,0h
											mov dh,20    ;setting cursor position for printing 
											int 10h
											
											mov al,[si]
											mov bh, 0h				;page number
											mov bl, 01110000b		;color
											mov cx, 1				;number of times to print character
											mov ah, 09h 			;write character at cursor position
											int 10h
											
											mov ah,02h
											inc dl
											inc si
											int 10h
											
											
										pop cx
									loop display3
				
					;$
					
									mov ax , 1h            	;display the mouse pointer on the screen
									int 33h
				
									;;;;;;;;;;;; MOUSE CHECKs ;;;;;;;;;;;;;;
									mouse:
										mov ax , 03h
										int 33h
				
										;;;;;; CHECK FOR PLAY GAME CLICK ;;;;;;;;;;
									   .IF CX >= 30*8 && CX <= 47*8 && DX >= 75 && DX <= 90	;Check for range
											.IF bx == 1 || bx == 2  ; check to see if mouse button pressed
												mov al, 13h
												mov ah, 0   ; Clear Screen
 00CF												int 10h  
				
 00CF  B9 0009													mov ah, 6
 00D2  BE 4EB3 R												mov al, 16
 00D5  B2 0B													mov bh, 001100000b
														mov ch, 0
 00D7														mov cl, 0
 00D7  51													mov dh, 20
														mov dl, 40
 00D8  B8 0000										int 10h
 00DB  B4 02											call displayGameScreen
 00DD  B7 00											
 00DF  B6 16											mov ah,4ch
 00E1  CD 10											int 21h
											.ENDIF
 00E3  8A 04								   .ENDIF
 00E5  B7 00								   
 00E7  B3 70								   ;;;;;; CHECK FOR INSTRUCTIONS CLICK ;;;;;;;;;;
 00E9  B9 0001								  .IF CX >= 26*8 && CX <= 49*8 && DX >= 115 && DX <= 130	;Check for range
 00EC  B4 09										.IF bx == 1 || bx == 2  ; check to see if mouse button pressed
 00EE  CD 10											mov al, 13h
												mov ah, 0   ; Clear Screen
 00F0  B4 02											int 10h  
 00F2  FE C2											call displayInstructions
 00F4  46											mov ah,4ch
 00F5  CD 10											int 21h
											.ENDIF
									   .ENDIF
 00F7  59								   ;;;;;; CHECK FOR EXIT CLICK ;;;;;;;;;;
 00F8  E2 DD								  .IF CX >= 33*8 && CX <= 42*8 && DX >= 155 && DX <= 167	;Check for range
											.IF bx == 1 || bx == 2  ; check to see if mouse button pressed
 00FA  50											mov al, 13h
 00FB  B8 0000											mov ah, 0   ; Clear Screen
 00FE  A1 4EB1 R										int 10h  		
 0101  E8 FFA4											call EXITdisplay
 0104  58											mov ah,4ch
 0105  C3											int 21h
 0106											.ENDIF
									   .ENDIF 
 0106									 
 0106  51								   jmp mouse
 0107  50			
 0108  52							options endp
 0109  53			
								EXITdisplay proc
 010A  8B 1E 4E65 R						;local display3
 010E  8B 0E 4E67 R							mov cx , LENGTHOF goodBye
									mov si,offset goodBye
 0112  A1 4E6D R							mov dl,17
									
 0124  FF 0E 4EAF R						display3:
									push cx
 0128  A1 4E6D R	     1					mov ax, bush1X	; X co-ordinate
 012B  8B 16 4E6F R	     1					mov dx, bush1Y	; Y co-ordinate
 012F  B9 023F		     1					mov cx, 575		; size of array = 625
 0132  BE 0000		     1					mov si, 0 		; for indexing
 0135  BB 0000		     1					mov bx, 0 		; for indexing
 0138			     1					??0000:
 0138  51		     1					PUSH cx
 0139  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 013B  80 A8 3004 R 30	     1							sub BushType1[bx+si],'0'	; to get a decimal number for color
 0140  B0 60		     1							mov al, 001100000b	; array traversing
 0142  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0144  CD 10		     1							int 10h
 0146  80 80 3004 R 30	     1							add BushType1[bx+si],'0'
 014B  46		     1							inc si 						; to get next index	of array
 014C  8B C1		     1							mov ax,cx					; retrieving value from cx
 014E  40		     1							inc ax						; increament in coloumn of drawing pixel
 014F  83 FE 19		     1							cmp si, 25					; if si is 25 then change row
 0152  75 0A		     1							jne ??0003;					; if there is no need to change row
 0154  A1 4E6D R	     1						    mov ax, bush1X				; taking coloumn back to start
 0157  BE 0000		     1							mov si, 0					;
 015A  83 C3 19		     1							add bx, 25					; going to next row of array
 015D  42		     1							inc dx
 015E			     1						??0003:
 015E  59		     1					POP cx
 015F  E2 D7		     1					Loop ??0000
 0161  81 2E 4E6D R 00A0							
										mov ax , 0
										mov ah,02h
 0167  A1 4E71 R								mov bh,0h
										mov dh,6    ;setting cursor position for printing 
 0179  FF 0E 4EAF R								int 10h
										
 017D  A1 4E71 R	     1					mov ax, bush2X	; X co-ordinate
 0180  8B 16 4E73 R	     1					mov dx, bush2Y	; Y co-ordinate
 0184  B9 0514		     1					mov cx, 1300	; size of array = 1450
 0187  BE 0000		     1					mov si, 0 		; for indexing
 018A  BB 0000		     1					mov bx, 0 		; for indexing
 018D			     1					??0004:
 018D  51		     1					PUSH cx
 018E  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0190  80 A8 32B6 R 30	     1							sub BushType2[bx+si],'0'	; to get a decimal number for color
 0195  B0 60		     1							mov al, 001100000b					; array traversing
 0197  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0199  CD 10		     1							int 10h
 019B  80 80 32B6 R 30	     1							add BushType2[bx+si],'0'   
 01A0  46		     1							inc si 						; to get next index	of array
 01A1  8B C1		     1							mov ax,cx					; retrieving value from cx
 01A3  40		     1							inc ax						; increament in coloumn of drawing pixel
 01A4  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 01A7  75 0A		     1							jne ??0007;				; if there is no need to change row
 01A9  A1 4E71 R	     1						    mov ax, bush2X				; taking coloumn back to start
 01AC  BE 0000		     1							mov si, 0					;
 01AF  83 C3 32		     1							add bx, 50					; going to next row of array
 01B2  42		     1							inc dx
 01B3			     1						??0007:
 01B3  59		     1					POP cx
 01B4  E2 D7		     1					Loop ??0004
 01B6  81 2E 4E71 R 00A0							mov al,[si]
										mov bh, 0h				;page number
										mov bl, 01110000b		;color
 01BC  A1 4E69 R								mov cx, 1				;number of times to print character
 01BF  8B 0E 4EAD R								mov ah, 09h 			;write character at cursor position
										int 10h
 01D1  FF 0E 4EAF R								
										mov ah,02h
 01D5  A1 4E69 R	     1					mov ax, dragoX	; X co-ordinate
 01D8  8B 16 4E6B R	     1					mov dx, dragoY	; Y co-ordinate
 01DC  B9 05E1		     1					mov cx, 1505		; size of array = 840
 01DF  BE 0000		     1					mov si, 0 		; for indexing
 01E2  BB 0000		     1					mov bx, 0 		; for indexing
 01E5			     1					??0008:
 01E5  51		     1					PUSH cx
 01E6  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 01E8  80 A8 1925 R 30	     1							sub Drago[bx+si],'0'		; to get a decimal number for color
 01ED  B0 60		     1							mov al, 001100000b		; array traversing
 01EF  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 01F1  CD 10		     1							int 10h
 01F3  80 80 1925 R 30	     1							add Drago[bx+si],'0'
 01F8  46		     1							inc si 						; to get next index	of array
 01F9  8B C1		     1							mov ax,cx					; retrieving value from cx
 01FB  40		     1							inc ax						; increament in coloumn of drawing pixel
 01FC  83 FE 20		     1							cmp si, 32					; if si is 50 then change row
 01FF  75 0A		     1							jne ??000B;				; if there is no need to change row
 0201  A1 4E69 R	     1						    mov ax, dragoX				; taking coloumn back to start
 0204  BE 0000		     1							mov si, 0					;
 0207  83 C3 20		     1							add bx, 32					; going to next row of array
 020A  42		     1							inc dx
 020B			     1						??000B:
 020B  59		     1					POP cx
 020C  E2 D7		     1					Loop ??0008
 020E  81 2E 4E69 R 00A0							inc dl
										inc si
										int 10h
										
 0214  5B									
 0215  5A								pop cx
 0216  58							loop display3
 0217  59							ret
 0218  C3							EXITdisplay endp
 0219				
				end main
 0219
 0219  B8 0000
 021C  B4 01
 021E  CD 16
 0220  75 03 E9 014C
 0225  B4 00
 0227  CD 16
 0229  80 FC 48
 022C  74 1B
 022E  80 FC 4B
 0231  75 03 E9 00A9
 0236  80 FC 4D
 0239  75 03 E9 00EB
 023E  80 FC 50
 0241  74 51
 0243  80 FC 01
 0246  E9 0128
 0249
 0249  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 024C  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 0250  B9 0640		     1					mov cx, 1600
 0253  BE 0000		     1					mov si,0
 0256  BB 0000		     1					mov bx,0
 0259			     1					??000C:
 0259  51		     1					push cx
 025A  8B C8		     1					mov cx,ax
 025C  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0261  B0 60		     1							mov al, 001100000b
 0263  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 0268  75 02		     1							jne ??0010
 026A  B0 60		     1								mov al, 001100000b
 026C			     1							??0010:
 026C  B4 0C		     1							mov ah, 0ch       
 026E  CD 10		     1							int 10h
 0270  80 80 0025 R 30	     1						add dino[bx+si], '0'
 0275  46		     1						inc si
 0276  8B C1		     1						mov ax,cx
 0278  40		     1						inc ax
 0279  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 027C  75 0A		     1						jne ??000F;
 027E  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0281  BE 0000		     1						mov si,0
 0284  83 C3 32		     1						add bx,50
 0287  42		     1						inc dx
 0288			     1						??000F:
 0288  59		     1					pop cx
 0289  E2 CE		     1					Loop ??000C
 028B  C7 06 4EAD R 0001
 0291  E9 00DD
 0294
 0294  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 0297  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 029B  B9 0640		     1					mov cx, 1600
 029E  BE 0000		     1					mov si,0
 02A1  BB 0000		     1					mov bx,0
 02A4			     1					??0011:
 02A4  51		     1					push cx
 02A5  8B C8		     1					mov cx,ax
 02A7  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 02AC  B0 60		     1							mov al, 001100000b
 02AE  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 02B3  75 02		     1							jne ??0015
 02B5  B0 60		     1								mov al, 001100000b
 02B7			     1							??0015:
 02B7  B4 0C		     1							mov ah, 0ch       
 02B9  CD 10		     1							int 10h
 02BB  80 80 0025 R 30	     1						add dino[bx+si], '0'
 02C0  46		     1						inc si
 02C1  8B C1		     1						mov ax,cx
 02C3  40		     1						inc ax
 02C4  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 02C7  75 0A		     1						jne ??0014;
 02C9  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 02CC  BE 0000		     1						mov si,0
 02CF  83 C3 32		     1						add bx,50
 02D2  42		     1						inc dx
 02D3			     1						??0014:
 02D3  59		     1					pop cx
 02D4  E2 CE		     1					Loop ??0011
 02D6  C7 06 4EAD R 0002
 02DC  E9 0092
 02DF
 02DF  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 02E2  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 02E6  B9 0640		     1					mov cx, 1600
 02E9  BE 0000		     1					mov si,0
 02EC  BB 0000		     1					mov bx,0
 02EF			     1					??0016:
 02EF  51		     1					push cx
 02F0  8B C8		     1					mov cx,ax
 02F2  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 02F7  B0 60		     1							mov al, 001100000b
 02F9  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 02FE  75 02		     1							jne ??001A
 0300  B0 60		     1								mov al, 001100000b
 0302			     1							??001A:
 0302  B4 0C		     1							mov ah, 0ch       
 0304  CD 10		     1							int 10h
 0306  80 80 0025 R 30	     1						add dino[bx+si], '0'
 030B  46		     1						inc si
 030C  8B C1		     1						mov ax,cx
 030E  40		     1						inc ax
 030F  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0312  75 0A		     1						jne ??0019;
 0314  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0317  BE 0000		     1						mov si,0
 031A  83 C3 32		     1						add bx,50
 031D  42		     1						inc dx
 031E			     1						??0019:
 031E  59		     1					pop cx
 031F  E2 CE		     1					Loop ??0016
 0321  C7 06 4EAD R 0003
 0327  EB 48
 0329
 0329  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 032C  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 0330  B9 0640		     1					mov cx, 1600
 0333  BE 0000		     1					mov si,0
 0336  BB 0000		     1					mov bx,0
 0339			     1					??001B:
 0339  51		     1					push cx
 033A  8B C8		     1					mov cx,ax
 033C  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0341  B0 60		     1							mov al, 001100000b
 0343  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 0348  75 02		     1							jne ??001F
 034A  B0 60		     1								mov al, 001100000b
 034C			     1							??001F:
 034C  B4 0C		     1							mov ah, 0ch       
 034E  CD 10		     1							int 10h
 0350  80 80 0025 R 30	     1						add dino[bx+si], '0'
 0355  46		     1						inc si
 0356  8B C1		     1						mov ax,cx
 0358  40		     1						inc ax
 0359  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 035C  75 0A		     1						jne ??001E;
 035E  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0361  BE 0000		     1						mov si,0
 0364  83 C3 32		     1						add bx,50
 0367  42		     1						inc dx
 0368			     1						??001E:
 0368  59		     1					pop cx
 0369  E2 CE		     1					Loop ??001B
 036B  C7 06 4EAD R 0004
 0371
 0371  51
 0372  50
 0373  8B 0E 4EAD R
 0377  A1 4E67 R
 0384  83 E8 03
 0387  A3 4E67 R
 0394  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 0397  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 039B  B9 0640		     1					mov cx, 1600
 039E  BE 0000		     1					mov si,0
 03A1  BB 0000		     1					mov bx,0
 03A4			     1					??0020:
 03A4  51		     1					push cx
 03A5  8B C8		     1					mov cx,ax
 03A7  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 03AC  B0 60		     1							mov al, 001100000b
 03AE  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 03B3  75 02		     1							jne ??0024
 03B5  B0 60		     1								mov al, 001100000b
 03B7			     1							??0024:
 03B7  B4 0C		     1							mov ah, 0ch       
 03B9  CD 10		     1							int 10h
 03BB  80 80 0025 R 30	     1						add dino[bx+si], '0'
 03C0  46		     1						inc si
 03C1  8B C1		     1						mov ax,cx
 03C3  40		     1						inc ax
 03C4  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 03C7  75 0A		     1						jne ??0023;
 03C9  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 03CC  BE 0000		     1						mov si,0
 03CF  83 C3 32		     1						add bx,50
 03D2  42		     1						inc dx
 03D3			     1						??0023:
 03D3  59		     1					pop cx
 03D4  E2 CE		     1					Loop ??0020
 03D6  C7 06 4E67 R 008A
 03DC  B8 0000
 03DF  A3 4EAD R
 03E2  58
 03E3  59
 03E4  51
 03E5  8B 0E 4EAD R
 03F3  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 03F6  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 03FA  B9 0640		     1					mov cx, 1600
 03FD  BE 0000		     1					mov si,0
 0400  BB 0000		     1					mov bx,0
 0403			     1					??0025:
 0403  51		     1					push cx
 0404  8B C8		     1					mov cx,ax
 0406  80 A8 0665 R 30	     1					sub duckDino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 040B  8A 80 0665 R	     1							mov al, duckDino[bx+si]
 040F  80 B8 0665 R 03	     1							cmp duckDino[bx+si], 3
 0414  75 02		     1							jne ??0029
 0416  B0 60		     1								mov al, 001100000b
 0418			     1							??0029:
 0418  B4 0C		     1							mov ah, 0ch       
 041A  CD 10		     1							int 10h
 041C  80 80 0665 R 30	     1						add duckDino[bx+si], '0'
 0421  46		     1						inc si
 0422  8B C1		     1						mov ax,cx
 0424  40		     1						inc ax
 0425  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0428  75 0A		     1						jne ??0028;
 042A  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 042D  BE 0000		     1						mov si,0
 0430  83 C3 32		     1						add bx,50
 0433  42		     1						inc dx
 0434			     1						??0028:
 0434  59		     1					pop cx
 0435  E2 CC		     1					Loop ??0025
 0437  59
 0438  51
 0439  8B 0E 4EAD R
 0447  83 06 4E65 R 01
 044C  B8 0000
 044F  A3 4EAD R
 0452  59
 0453  51
 0454  8B 0E 4EAD R
 0462  83 2E 4E65 R 01
 0467  B8 0000
 046A  A3 4EAD R
 046D  59
 046E  C3
 046F
 046F
 046F  8B 0E 4E69 R
 0479  A1 4E69 R	     1					mov ax, dragoX	; X co-ordinate
 047C  BA 0073		     1					mov dx, 115	; Y co-ordinate
 047F  B9 05E1		     1					mov cx, 1505	; size of array = 1450
 0482  BE 0000		     1					mov si, 0 		; for indexing
 0485  BB 0000		     1					mov bx, 0 		; for indexing
 0488			     1					??002A:
 0488  51		     1					PUSH cx
 0489  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 048B  80 A8 1925 R 30	     1							sub Drago[bx+si],'0'	; to get a decimal number for color
 0490  8A 80 1925 R	     1							mov al, Drago[bx+si]	; array traversing
 0494  80 B8 1925 R 03	     1							cmp Drago[bx+si], 3
 0499  75 02		     1							jne ??002E
 049B  B0 60		     1								mov al, 001100000b
 049D			     1							??002E:
 049D  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 049F  CD 10		     1							int 10h
 04A1  80 80 1925 R 30	     1							add Drago[bx+si],'0'   
 04A6  46		     1							inc si 						; to get next index	of array
 04A7  8B C1		     1							mov ax,cx					; retrieving value from cx
 04A9  40		     1							inc ax						; increament in coloumn of drawing pixel
 04AA  83 FE 2B		     1							cmp si, 43					; if si is 50 then change row
 04AD  75 0A		     1							jne ??002D;				; if there is no need to change row
 04AF  A1 4E69 R	     1						    mov ax, dragoX				; taking coloumn back to start
 04B2  BE 0000		     1							mov si, 0					;
 04B5  83 C3 2B		     1							add bx, 43					; going to next row of array
 04B8  42		     1							inc dx
 04B9			     1						??002D:
 04B9  59		     1					POP cx
 04BA  E2 CC		     1					Loop ??002A
 04BC  8B 0E 4E6D R
 04C6  A1 4E6D R	     1					mov ax, bush1X	; X co-ordinate
 04C9  BA 0091		     1					mov dx, 145	; Y co-ordinate
 04CC  B9 02B2		     1					mov cx, 690	; size of array = 1450
 04CF  BE 0000		     1					mov si, 0 		; for indexing
 04D2  BB 0000		     1					mov bx, 0 		; for indexing
 04D5			     1					??002F:
 04D5  51		     1					PUSH cx
 04D6  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 04D8  80 A8 3004 R 30	     1							sub BushType1[bx+si],'0'	; to get a decimal number for color
 04DD  8A 80 3004 R	     1							mov al, BushType1[bx+si]	; array traversing
 04E1  80 B8 3004 R 03	     1							cmp BushType1[bx+si], 3
 04E6  75 02		     1							jne ??0033
 04E8  B0 60		     1								mov al, 001100000b
 04EA			     1							??0033:
 04EA  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 04EC  CD 10		     1							int 10h
 04EE  80 80 3004 R 30	     1							add BushType1[bx+si],'0'   
 04F3  46		     1							inc si 						; to get next index	of array
 04F4  8B C1		     1							mov ax,cx					; retrieving value from cx
 04F6  40		     1							inc ax						; increament in coloumn of drawing pixel
 04F7  83 FE 1E		     1							cmp si, 30					; if si is 50 then change row
 04FA  75 0A		     1							jne ??0032;				; if there is no need to change row
 04FC  A1 4E6D R	     1						    mov ax, bush1X				; taking coloumn back to start
 04FF  BE 0000		     1							mov si, 0					;
 0502  83 C3 1E		     1							add bx,30					; going to next row of array
 0505  42		     1							inc dx
 0506			     1						??0032:
 0506  59		     1					POP cx
 0507  E2 CC		     1					Loop ??002F
 0509  8B 0E 4E71 R
 0513  A1 4E71 R	     1					mov ax, bush2X	; X co-ordinate
 0516  BA 008E		     1					mov dx, 142	; Y co-ordinate
 0519  B9 0514		     1					mov cx, 1300	; size of array = 1450
 051C  BE 0000		     1					mov si, 0 		; for indexing
 051F  BB 0000		     1					mov bx, 0 		; for indexing
 0522			     1					??0034:
 0522  51		     1					PUSH cx
 0523  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0525  80 A8 32B6 R 30	     1							sub BushType2[bx+si],'0'	; to get a decimal number for color
 052A  8A 80 32B6 R	     1							mov al, BushType2[bx+si]	; array traversing
 052E  80 B8 32B6 R 03	     1							cmp BushType2[bx+si], 3
 0533  75 02		     1							jne ??0038
 0535  B0 60		     1								mov al, 001100000b
 0537			     1							??0038:
 0537  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0539  CD 10		     1							int 10h
 053B  80 80 32B6 R 30	     1							add BushType2[bx+si],'0'   
 0540  46		     1							inc si 						; to get next index	of array
 0541  8B C1		     1							mov ax,cx					; retrieving value from cx
 0543  40		     1							inc ax						; increament in coloumn of drawing pixel
 0544  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 0547  75 0A		     1							jne ??0037;				; if there is no need to change row
 0549  A1 4E71 R	     1						    mov ax, bush2X				; taking coloumn back to start
 054C  BE 0000		     1							mov si, 0					;
 054F  83 C3 32		     1							add bx, 50					; going to next row of array
 0552  42		     1							inc dx
 0553			     1						??0037:
 0553  59		     1					POP cx
 0554  E2 CC		     1					Loop ??0034
 0556  A1 4E75 R	     1					mov ax, cloud1X	; X co-ordinate
 0559  8B 16 4E77 R	     1					mov dx, cloud1Y	; Y co-ordinate
 055D  B9 01F8		     1					mov cx, 504		; size of array = 81
 0560  BE 0000		     1					mov si, 0 		; for indexing
 0563  BB 0000		     1					mov bx, 0 		; for indexing
 0566			     1					??0039:
 0566  51		     1					PUSH cx
 0567  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0569  80 A8 38BD R 30	     1							sub Clouds[bx+si],'0'	; to get a decimal number for color
 056E  8A 80 38BD R	     1							mov al, Clouds[bx+si]	; array traversing
 0572  80 B8 38BD R 03	     1							cmp Clouds[bx+si], 3
 0577  75 02		     1							jne ??003D
 0579  B0 60		     1								mov al, 001100000b
 057B			     1							??003D:
 057B  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 057D  CD 10		     1							int 10h
 057F  80 80 38BD R 30	     1							add Clouds[bx+si],'0'
 0584  46		     1							inc si 						; to get next index	of array
 0585  8B C1		     1							mov ax,cx					; retrieving value from cx
 0587  40		     1							inc ax						; increament in coloumn of drawing pixel
 0588  83 FE 1C		     1							cmp si, 28					; if si is 25 then change row
 058B  75 0A		     1							jne ??003C;					; if there is no need to change row
 058D  A1 4E75 R	     1						    mov ax, cloud1X				; taking coloumn back to start
 0590  BE 0000		     1							mov si, 0					;
 0593  83 C3 1C		     1							add bx, 28					; going to next row of array
 0596  42		     1							inc dx
 0597			     1						??003C:
 0597  59		     1					POP cx
 0598  E2 CC		     1					Loop ??0039
 059A  A1 4E79 R	     1					mov ax, cloud2X	; X co-ordinate
 059D  8B 16 4E7B R	     1					mov dx, cloud2Y	; Y co-ordinate
 05A1  B9 01F8		     1					mov cx, 504		; size of array = 81
 05A4  BE 0000		     1					mov si, 0 		; for indexing
 05A7  BB 0000		     1					mov bx, 0 		; for indexing
 05AA			     1					??003E:
 05AA  51		     1					PUSH cx
 05AB  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 05AD  80 A8 38BD R 30	     1							sub Clouds[bx+si],'0'	; to get a decimal number for color
 05B2  8A 80 38BD R	     1							mov al, Clouds[bx+si]	; array traversing
 05B6  80 B8 38BD R 03	     1							cmp Clouds[bx+si], 3
 05BB  75 02		     1							jne ??0042
 05BD  B0 60		     1								mov al, 001100000b
 05BF			     1							??0042:
 05BF  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 05C1  CD 10		     1							int 10h
 05C3  80 80 38BD R 30	     1							add Clouds[bx+si],'0'
 05C8  46		     1							inc si 						; to get next index	of array
 05C9  8B C1		     1							mov ax,cx					; retrieving value from cx
 05CB  40		     1							inc ax						; increament in coloumn of drawing pixel
 05CC  83 FE 1C		     1							cmp si, 28					; if si is 25 then change row
 05CF  75 0A		     1							jne ??0041;					; if there is no need to change row
 05D1  A1 4E79 R	     1						    mov ax, cloud2X				; taking coloumn back to start
 05D4  BE 0000		     1							mov si, 0					;
 05D7  83 C3 1C		     1							add bx, 28					; going to next row of array
 05DA  42		     1							inc dx
 05DB			     1						??0041:
 05DB  59		     1					POP cx
 05DC  E2 CC		     1					Loop ??003E
 05DE  A1 4E7D R	     1					mov ax, cloud3X	; X co-ordinate
 05E1  8B 16 4E7F R	     1					mov dx, cloud3Y	; Y co-ordinate
 05E5  B9 01F8		     1					mov cx, 504		; size of array = 81
 05E8  BE 0000		     1					mov si, 0 		; for indexing
 05EB  BB 0000		     1					mov bx, 0 		; for indexing
 05EE			     1					??0043:
 05EE  51		     1					PUSH cx
 05EF  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 05F1  80 A8 38BD R 30	     1							sub Clouds[bx+si],'0'	; to get a decimal number for color
 05F6  8A 80 38BD R	     1							mov al, Clouds[bx+si]	; array traversing
 05FA  80 B8 38BD R 03	     1							cmp Clouds[bx+si], 3
 05FF  75 02		     1							jne ??0047
 0601  B0 60		     1								mov al, 001100000b
 0603			     1							??0047:
 0603  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0605  CD 10		     1							int 10h
 0607  80 80 38BD R 30	     1							add Clouds[bx+si],'0'
 060C  46		     1							inc si 						; to get next index	of array
 060D  8B C1		     1							mov ax,cx					; retrieving value from cx
 060F  40		     1							inc ax						; increament in coloumn of drawing pixel
 0610  83 FE 1C		     1							cmp si, 28					; if si is 25 then change row
 0613  75 0A		     1							jne ??0046;					; if there is no need to change row
 0615  A1 4E7D R	     1						    mov ax, cloud3X				; taking coloumn back to start
 0618  BE 0000		     1							mov si, 0					;
 061B  83 C3 1C		     1							add bx, 28					; going to next row of array
 061E  42		     1							inc dx
 061F			     1						??0046:
 061F  59		     1					POP cx
 0620  E2 CC		     1					Loop ??0043
 0622  51
 0623  8B 0E 4EAF R
 0627  83 F9 03
 062A  74 4D
 062C  83 F9 02
 062F  75 03 E9 00F9
 0634  83 F9 01
 0637  75 03 E9 01A3
 063C  A1 4E95 R	     1					mov ax, heart1X	; X co-ordinate
 063F  8B 16 4E97 R	     1					mov dx, heart1Y	; Y co-ordinate
 0643  B9 0051		     1					mov cx, 81		; size of array = 81
 0646  BE 0000		     1					mov si, 0 		; for indexing
 0649  BB 0000		     1					mov bx, 0 		; for indexing
 064C			     1					??0048:
 064C  51		     1					PUSH cx
 064D  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 064F  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0654  B0 00		     1							mov al, 0	; array traversing
 0656  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0658  CD 10		     1							int 10h
 065A  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 065F  46		     1							inc si 						; to get next index	of array
 0660  8B C1		     1							mov ax,cx					; retrieving value from cx
 0662  40		     1							inc ax						; increament in coloumn of drawing pixel
 0663  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 0666  75 0A		     1							jne ??004B;					; if there is no need to change row
 0668  A1 4E95 R	     1						    mov ax, heart1X				; taking coloumn back to start
 066B  BE 0000		     1							mov si, 0					;
 066E  83 C3 09		     1							add bx, 9					; going to next row of array
 0671  42		     1							inc dx
 0672			     1						??004B:
 0672  59		     1					POP cx
 0673  E2 D7		     1					Loop ??0048
 0675  B4 4C
 0677  CD 21
 0679
 0679  A1 4E95 R	     1					mov ax, heart1X	; X co-ordinate
 067C  8B 16 4E97 R	     1					mov dx, heart1Y	; Y co-ordinate
 0680  B9 0051		     1					mov cx, 81		; size of array = 81
 0683  BE 0000		     1					mov si, 0 		; for indexing
 0686  BB 0000		     1					mov bx, 0 		; for indexing
 0689			     1					??004C:
 0689  51		     1					PUSH cx
 068A  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 068C  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0691  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 0695  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0697  CD 10		     1							int 10h
 0699  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 069E  46		     1							inc si 						; to get next index	of array
 069F  8B C1		     1							mov ax,cx					; retrieving value from cx
 06A1  40		     1							inc ax						; increament in coloumn of drawing pixel
 06A2  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 06A5  75 0A		     1							jne ??004F;					; if there is no need to change row
 06A7  A1 4E95 R	     1						    mov ax, heart1X				; taking coloumn back to start
 06AA  BE 0000		     1							mov si, 0					;
 06AD  83 C3 09		     1							add bx, 9					; going to next row of array
 06B0  42		     1							inc dx
 06B1			     1						??004F:
 06B1  59		     1					POP cx
 06B2  E2 D5		     1					Loop ??004C
 06B4  A1 4E99 R	     1					mov ax, heart2X	; X co-ordinate
 06B7  8B 16 4E9B R	     1					mov dx, heart2Y	; Y co-ordinate
 06BB  B9 0051		     1					mov cx, 81		; size of array = 81
 06BE  BE 0000		     1					mov si, 0 		; for indexing
 06C1  BB 0000		     1					mov bx, 0 		; for indexing
 06C4			     1					??0050:
 06C4  51		     1					PUSH cx
 06C5  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 06C7  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 06CC  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 06D0  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 06D2  CD 10		     1							int 10h
 06D4  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 06D9  46		     1							inc si 						; to get next index	of array
 06DA  8B C1		     1							mov ax,cx					; retrieving value from cx
 06DC  40		     1							inc ax						; increament in coloumn of drawing pixel
 06DD  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 06E0  75 0A		     1							jne ??0053;					; if there is no need to change row
 06E2  A1 4E99 R	     1						    mov ax, heart2X				; taking coloumn back to start
 06E5  BE 0000		     1							mov si, 0					;
 06E8  83 C3 09		     1							add bx, 9					; going to next row of array
 06EB  42		     1							inc dx
 06EC			     1						??0053:
 06EC  59		     1					POP cx
 06ED  E2 D5		     1					Loop ??0050
 06EF  A1 4E9D R	     1					mov ax, heart3X	; X co-ordinate
 06F2  8B 16 4E9F R	     1					mov dx, heart3Y	; Y co-ordinate
 06F6  B9 0051		     1					mov cx, 81		; size of array = 81
 06F9  BE 0000		     1					mov si, 0 		; for indexing
 06FC  BB 0000		     1					mov bx, 0 		; for indexing
 06FF			     1					??0054:
 06FF  51		     1					PUSH cx
 0700  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0702  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0707  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 070B  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 070D  CD 10		     1							int 10h
 070F  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 0714  46		     1							inc si 						; to get next index	of array
 0715  8B C1		     1							mov ax,cx					; retrieving value from cx
 0717  40		     1							inc ax						; increament in coloumn of drawing pixel
 0718  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 071B  75 0A		     1							jne ??0057;					; if there is no need to change row
 071D  A1 4E9D R	     1						    mov ax, heart3X				; taking coloumn back to start
 0720  BE 0000		     1							mov si, 0					;
 0723  83 C3 09		     1							add bx, 9					; going to next row of array
 0726  42		     1							inc dx
 0727			     1						??0057:
 0727  59		     1					POP cx
 0728  E2 D5		     1					Loop ??0054
 072A  E9 015F
 072D
 072D  A1 4E9D R	     1					mov ax, heart3X	; X co-ordinate
 0730  8B 16 4E9F R	     1					mov dx, heart3Y	; Y co-ordinate
 0734  B9 0051		     1					mov cx, 81		; size of array = 81
 0737  BE 0000		     1					mov si, 0 		; for indexing
 073A  BB 0000		     1					mov bx, 0 		; for indexing
 073D			     1					??0058:
 073D  51		     1					PUSH cx
 073E  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0740  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0745  B0 00		     1							mov al, 0	; array traversing
 0747  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0749  CD 10		     1							int 10h
 074B  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 0750  46		     1							inc si 						; to get next index	of array
 0751  8B C1		     1							mov ax,cx					; retrieving value from cx
 0753  40		     1							inc ax						; increament in coloumn of drawing pixel
 0754  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 0757  75 0A		     1							jne ??005B;					; if there is no need to change row
 0759  A1 4E9D R	     1						    mov ax, heart3X				; taking coloumn back to start
 075C  BE 0000		     1							mov si, 0					;
 075F  83 C3 09		     1							add bx, 9					; going to next row of array
 0762  42		     1							inc dx
 0763			     1						??005B:
 0763  59		     1					POP cx
 0764  E2 D7		     1					Loop ??0058
 0766  A1 4E95 R	     1					mov ax, heart1X	; X co-ordinate
 0769  8B 16 4E97 R	     1					mov dx, heart1Y	; Y co-ordinate
 076D  B9 0051		     1					mov cx, 81		; size of array = 81
 0770  BE 0000		     1					mov si, 0 		; for indexing
 0773  BB 0000		     1					mov bx, 0 		; for indexing
 0776			     1					??005C:
 0776  51		     1					PUSH cx
 0777  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0779  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 077E  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 0782  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0784  CD 10		     1							int 10h
 0786  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 078B  46		     1							inc si 						; to get next index	of array
 078C  8B C1		     1							mov ax,cx					; retrieving value from cx
 078E  40		     1							inc ax						; increament in coloumn of drawing pixel
 078F  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 0792  75 0A		     1							jne ??005F;					; if there is no need to change row
 0794  A1 4E95 R	     1						    mov ax, heart1X				; taking coloumn back to start
 0797  BE 0000		     1							mov si, 0					;
 079A  83 C3 09		     1							add bx, 9					; going to next row of array
 079D  42		     1							inc dx
 079E			     1						??005F:
 079E  59		     1					POP cx
 079F  E2 D5		     1					Loop ??005C
 07A1  A1 4E99 R	     1					mov ax, heart2X	; X co-ordinate
 07A4  8B 16 4E9B R	     1					mov dx, heart2Y	; Y co-ordinate
 07A8  B9 0051		     1					mov cx, 81		; size of array = 81
 07AB  BE 0000		     1					mov si, 0 		; for indexing
 07AE  BB 0000		     1					mov bx, 0 		; for indexing
 07B1			     1					??0060:
 07B1  51		     1					PUSH cx
 07B2  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 07B4  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 07B9  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 07BD  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 07BF  CD 10		     1							int 10h
 07C1  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 07C6  46		     1							inc si 						; to get next index	of array
 07C7  8B C1		     1							mov ax,cx					; retrieving value from cx
 07C9  40		     1							inc ax						; increament in coloumn of drawing pixel
 07CA  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 07CD  75 0A		     1							jne ??0063;					; if there is no need to change row
 07CF  A1 4E99 R	     1						    mov ax, heart2X				; taking coloumn back to start
 07D2  BE 0000		     1							mov si, 0					;
 07D5  83 C3 09		     1							add bx, 9					; going to next row of array
 07D8  42		     1							inc dx
 07D9			     1						??0063:
 07D9  59		     1					POP cx
 07DA  E2 D5		     1					Loop ??0060
 07DC  E9 00AD
 07DF
 07DF  A1 4E9D R	     1					mov ax, heart3X	; X co-ordinate
 07E2  8B 16 4E9F R	     1					mov dx, heart3Y	; Y co-ordinate
 07E6  B9 0051		     1					mov cx, 81		; size of array = 81
 07E9  BE 0000		     1					mov si, 0 		; for indexing
 07EC  BB 0000		     1					mov bx, 0 		; for indexing
 07EF			     1					??0064:
 07EF  51		     1					PUSH cx
 07F0  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 07F2  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 07F7  B0 00		     1							mov al, 0	; array traversing
 07F9  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 07FB  CD 10		     1							int 10h
 07FD  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 0802  46		     1							inc si 						; to get next index	of array
 0803  8B C1		     1							mov ax,cx					; retrieving value from cx
 0805  40		     1							inc ax						; increament in coloumn of drawing pixel
 0806  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 0809  75 0A		     1							jne ??0067;					; if there is no need to change row
 080B  A1 4E9D R	     1						    mov ax, heart3X				; taking coloumn back to start
 080E  BE 0000		     1							mov si, 0					;
 0811  83 C3 09		     1							add bx, 9					; going to next row of array
 0814  42		     1							inc dx
 0815			     1						??0067:
 0815  59		     1					POP cx
 0816  E2 D7		     1					Loop ??0064
 0818  A1 4E99 R	     1					mov ax, heart2X	; X co-ordinate
 081B  8B 16 4E9B R	     1					mov dx, heart2Y	; Y co-ordinate
 081F  B9 0051		     1					mov cx, 81		; size of array = 81
 0822  BE 0000		     1					mov si, 0 		; for indexing
 0825  BB 0000		     1					mov bx, 0 		; for indexing
 0828			     1					??0068:
 0828  51		     1					PUSH cx
 0829  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 082B  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0830  B0 00		     1							mov al, 0	; array traversing
 0832  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0834  CD 10		     1							int 10h
 0836  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 083B  46		     1							inc si 						; to get next index	of array
 083C  8B C1		     1							mov ax,cx					; retrieving value from cx
 083E  40		     1							inc ax						; increament in coloumn of drawing pixel
 083F  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 0842  75 0A		     1							jne ??006B;					; if there is no need to change row
 0844  A1 4E99 R	     1						    mov ax, heart2X				; taking coloumn back to start
 0847  BE 0000		     1							mov si, 0					;
 084A  83 C3 09		     1							add bx, 9					; going to next row of array
 084D  42		     1							inc dx
 084E			     1						??006B:
 084E  59		     1					POP cx
 084F  E2 D7		     1					Loop ??0068
 0851  A1 4E95 R	     1					mov ax, heart1X	; X co-ordinate
 0854  8B 16 4E97 R	     1					mov dx, heart1Y	; Y co-ordinate
 0858  B9 0051		     1					mov cx, 81		; size of array = 81
 085B  BE 0000		     1					mov si, 0 		; for indexing
 085E  BB 0000		     1					mov bx, 0 		; for indexing
 0861			     1					??006C:
 0861  51		     1					PUSH cx
 0862  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0864  80 A8 37CA R 30	     1							sub Heart[bx+si],'0'	; to get a decimal number for color
 0869  8A 80 37CA R	     1							mov al, Heart[bx+si]	; array traversing
 086D  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 086F  CD 10		     1							int 10h
 0871  80 80 37CA R 30	     1							add Heart[bx+si],'0'
 0876  46		     1							inc si 						; to get next index	of array
 0877  8B C1		     1							mov ax,cx					; retrieving value from cx
 0879  40		     1							inc ax						; increament in coloumn of drawing pixel
 087A  83 FE 09		     1							cmp si, 9					; if si is 25 then change row
 087D  75 0A		     1							jne ??006F;					; if there is no need to change row
 087F  A1 4E95 R	     1						    mov ax, heart1X				; taking coloumn back to start
 0882  BE 0000		     1							mov si, 0					;
 0885  83 C3 09		     1							add bx, 9					; going to next row of array
 0888  42		     1							inc dx
 0889			     1						??006F:
 0889  59		     1					POP cx
 088A  E2 D5		     1					Loop ??006C
 088C
 088C  59
 088D  A1 4E81 R	     1					mov ax, star1X	; X co-ordinate
 0890  8B 16 4E83 R	     1					mov dx, star1Y	; Y co-ordinate
 0894  B9 00A2		     1					mov cx, 162		; size of array = 81
 0897  BE 0000		     1					mov si, 0 		; for indexing
 089A  BB 0000		     1					mov bx, 0 		; for indexing
 089D			     1					??0070:
 089D  51		     1					PUSH cx
 089E  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 08A0  80 A8 381B R 30	     1							sub Star1[bx+si],'0'	; to get a decimal number for color
 08A5  8A 80 381B R	     1							mov al, Star1[bx+si]	; array traversing
 08A9  80 B8 381B R 03	     1							cmp Star1[bx+si], 3
 08AE  75 02		     1							jne ??0074
 08B0  B0 60		     1								mov al, 001100000b
 08B2			     1							??0074:
 08B2  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 08B4  CD 10		     1							int 10h
 08B6  80 80 381B R 30	     1							add Star1[bx+si],'0'
 08BB  46		     1							inc si 						; to get next index	of array
 08BC  8B C1		     1							mov ax,cx					; retrieving value from cx
 08BE  40		     1							inc ax						; increament in coloumn of drawing pixel
 08BF  83 FE 12		     1							cmp si, 18					; if si is 25 then change row
 08C2  75 0A		     1							jne ??0073;					; if there is no need to change row
 08C4  A1 4E81 R	     1						    mov ax, star1X				; taking coloumn back to start
 08C7  BE 0000		     1							mov si, 0					;
 08CA  83 C3 12		     1							add bx, 18					; going to next row of array
 08CD  42		     1							inc dx
 08CE			     1						??0073:
 08CE  59		     1					POP cx
 08CF  E2 CC		     1					Loop ??0070
 08D1  A1 4E85 R	     1					mov ax, star2X	; X co-ordinate
 08D4  8B 16 4E87 R	     1					mov dx, star2Y	; Y co-ordinate
 08D8  B9 00A2		     1					mov cx, 162		; size of array = 81
 08DB  BE 0000		     1					mov si, 0 		; for indexing
 08DE  BB 0000		     1					mov bx, 0 		; for indexing
 08E1			     1					??0075:
 08E1  51		     1					PUSH cx
 08E2  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 08E4  80 A8 381B R 30	     1							sub Star1[bx+si],'0'	; to get a decimal number for color
 08E9  8A 80 381B R	     1							mov al, Star1[bx+si]	; array traversing
 08ED  80 B8 381B R 03	     1							cmp Star1[bx+si], 3
 08F2  75 02		     1							jne ??0079
 08F4  B0 60		     1								mov al, 001100000b
 08F6			     1							??0079:
 08F6  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 08F8  CD 10		     1							int 10h
 08FA  80 80 381B R 30	     1							add Star1[bx+si],'0'
 08FF  46		     1							inc si 						; to get next index	of array
 0900  8B C1		     1							mov ax,cx					; retrieving value from cx
 0902  40		     1							inc ax						; increament in coloumn of drawing pixel
 0903  83 FE 12		     1							cmp si, 18					; if si is 25 then change row
 0906  75 0A		     1							jne ??0078;					; if there is no need to change row
 0908  A1 4E85 R	     1						    mov ax, star2X				; taking coloumn back to start
 090B  BE 0000		     1							mov si, 0					;
 090E  83 C3 12		     1							add bx, 18					; going to next row of array
 0911  42		     1							inc dx
 0912			     1						??0078:
 0912  59		     1					POP cx
 0913  E2 CC		     1					Loop ??0075
 0915  A1 4E89 R	     1					mov ax, star3X	; X co-ordinate
 0918  8B 16 4E8B R	     1					mov dx, star3Y	; Y co-ordinate
 091C  B9 00A2		     1					mov cx, 162		; size of array = 81
 091F  BE 0000		     1					mov si, 0 		; for indexing
 0922  BB 0000		     1					mov bx, 0 		; for indexing
 0925			     1					??007A:
 0925  51		     1					PUSH cx
 0926  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0928  80 A8 381B R 30	     1							sub Star1[bx+si],'0'	; to get a decimal number for color
 092D  8A 80 381B R	     1							mov al, Star1[bx+si]	; array traversing
 0931  80 B8 381B R 03	     1							cmp Star1[bx+si], 3
 0936  75 02		     1							jne ??007E
 0938  B0 60		     1								mov al, 001100000b
 093A			     1							??007E:
 093A  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 093C  CD 10		     1							int 10h
 093E  80 80 381B R 30	     1							add Star1[bx+si],'0'
 0943  46		     1							inc si 						; to get next index	of array
 0944  8B C1		     1							mov ax,cx					; retrieving value from cx
 0946  40		     1							inc ax						; increament in coloumn of drawing pixel
 0947  83 FE 12		     1							cmp si, 18					; if si is 25 then change row
 094A  75 0A		     1							jne ??007D;					; if there is no need to change row
 094C  A1 4E89 R	     1						    mov ax, star3X				; taking coloumn back to start
 094F  BE 0000		     1							mov si, 0					;
 0952  83 C3 12		     1							add bx, 18					; going to next row of array
 0955  42		     1							inc dx
 0956			     1						??007D:
 0956  59		     1					POP cx
 0957  E2 CC		     1					Loop ??007A
 0959  A1 4E8D R	     1					mov ax, star4X	; X co-ordinate
 095C  8B 16 4E8F R	     1					mov dx, star4Y	; Y co-ordinate
 0960  B9 00A2		     1					mov cx, 162		; size of array = 81
 0963  BE 0000		     1					mov si, 0 		; for indexing
 0966  BB 0000		     1					mov bx, 0 		; for indexing
 0969			     1					??007F:
 0969  51		     1					PUSH cx
 096A  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 096C  80 A8 381B R 30	     1							sub Star1[bx+si],'0'	; to get a decimal number for color
 0971  8A 80 381B R	     1							mov al, Star1[bx+si]	; array traversing
 0975  80 B8 381B R 03	     1							cmp Star1[bx+si], 3
 097A  75 02		     1							jne ??0083
 097C  B0 60		     1								mov al, 001100000b
 097E			     1							??0083:
 097E  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0980  CD 10		     1							int 10h
 0982  80 80 381B R 30	     1							add Star1[bx+si],'0'
 0987  46		     1							inc si 						; to get next index	of array
 0988  8B C1		     1							mov ax,cx					; retrieving value from cx
 098A  40		     1							inc ax						; increament in coloumn of drawing pixel
 098B  83 FE 12		     1							cmp si, 18					; if si is 25 then change row
 098E  75 0A		     1							jne ??0082;					; if there is no need to change row
 0990  A1 4E8D R	     1						    mov ax, star4X				; taking coloumn back to start
 0993  BE 0000		     1							mov si, 0					;
 0996  83 C3 12		     1							add bx, 18					; going to next row of array
 0999  42		     1							inc dx
 099A			     1						??0082:
 099A  59		     1					POP cx
 099B  E2 CC		     1					Loop ??007F
 099D  A1 4E91 R	     1					mov ax, star5X	; X co-ordinate
 09A0  8B 16 4E93 R	     1					mov dx, star5Y	; Y co-ordinate
 09A4  B9 00A2		     1					mov cx, 162		; size of array = 81
 09A7  BE 0000		     1					mov si, 0 		; for indexing
 09AA  BB 0000		     1					mov bx, 0 		; for indexing
 09AD			     1					??0084:
 09AD  51		     1					PUSH cx
 09AE  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 09B0  80 A8 381B R 30	     1							sub Star1[bx+si],'0'	; to get a decimal number for color
 09B5  8A 80 381B R	     1							mov al, Star1[bx+si]	; array traversing
 09B9  80 B8 381B R 03	     1							cmp Star1[bx+si], 3
 09BE  75 02		     1							jne ??0088
 09C0  B0 60		     1								mov al, 001100000b
 09C2			     1							??0088:
 09C2  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 09C4  CD 10		     1							int 10h
 09C6  80 80 381B R 30	     1							add Star1[bx+si],'0'
 09CB  46		     1							inc si 						; to get next index	of array
 09CC  8B C1		     1							mov ax,cx					; retrieving value from cx
 09CE  40		     1							inc ax						; increament in coloumn of drawing pixel
 09CF  83 FE 12		     1							cmp si, 18					; if si is 25 then change row
 09D2  75 0A		     1							jne ??0087;					; if there is no need to change row
 09D4  A1 4E91 R	     1						    mov ax, star5X				; taking coloumn back to start
 09D7  BE 0000		     1							mov si, 0					;
 09DA  83 C3 12		     1							add bx, 18					; going to next row of array
 09DD  42		     1							inc dx
 09DE			     1						??0087:
 09DE  59		     1					POP cx
 09DF  E2 CC		     1					Loop ??0084
 09E1  8B 0E 4EAD R
 09ED  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 09F0  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 09F4  B9 0640		     1					mov cx, 1600
 09F7  BE 0000		     1					mov si,0
 09FA  BB 0000		     1					mov bx,0
 09FD			     1					??0089:
 09FD  51		     1					push cx
 09FE  8B C8		     1					mov cx,ax
 0A00  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0A05  8A 80 0025 R	     1							mov al, dino[bx+si]
 0A09  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 0A0E  75 02		     1							jne ??008D
 0A10  B0 60		     1								mov al, 001100000b
 0A12			     1							??008D:
 0A12  B4 0C		     1							mov ah, 0ch       
 0A14  CD 10		     1							int 10h
 0A16  80 80 0025 R 30	     1						add dino[bx+si], '0'
 0A1B  46		     1						inc si
 0A1C  8B C1		     1						mov ax,cx
 0A1E  40		     1						inc ax
 0A1F  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0A22  75 0A		     1						jne ??008C;
 0A24  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0A27  BE 0000		     1						mov si,0
 0A2A  83 C3 32		     1						add bx,50
 0A2D  42		     1						inc dx
 0A2E			     1						??008C:
 0A2E  59		     1					pop cx
 0A2F  E2 CC		     1					Loop ??0089
 0A31  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 0A34  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 0A38  B9 0640		     1					mov cx, 1600
 0A3B  BE 0000		     1					mov si,0
 0A3E  BB 0000		     1					mov bx,0
 0A41			     1					??008E:
 0A41  51		     1					push cx
 0A42  8B C8		     1					mov cx,ax
 0A44  80 A8 0CA5 R 30	     1					sub dino1[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0A49  8A 80 0CA5 R	     1							mov al, dino1[bx+si]
 0A4D  80 B8 0CA5 R 03	     1							cmp dino1[bx+si], 3
 0A52  75 02		     1							jne ??0092
 0A54  B0 60		     1								mov al, 001100000b
 0A56			     1							??0092:
 0A56  B4 0C		     1							mov ah, 0ch       
 0A58  CD 10		     1							int 10h
 0A5A  80 80 0CA5 R 30	     1						add dino1[bx+si], '0'
 0A5F  46		     1						inc si
 0A60  8B C1		     1						mov ax,cx
 0A62  40		     1						inc ax
 0A63  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0A66  75 0A		     1						jne ??0091;
 0A68  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0A6B  BE 0000		     1						mov si,0
 0A6E  83 C3 32		     1						add bx,50
 0A71  42		     1						inc dx
 0A72			     1						??0091:
 0A72  59		     1					pop cx
 0A73  E2 CC		     1					Loop ??008E
 0A75  A1 4E65 R	     1					mov ax, dinoX	; X coordinates
 0A78  8B 16 4E67 R	     1					mov dx, dinoY	; Y coordinates
 0A7C  B9 0640		     1					mov cx, 1600
 0A7F  BE 0000		     1					mov si,0
 0A82  BB 0000		     1					mov bx,0
 0A85			     1					??0093:
 0A85  51		     1					push cx
 0A86  8B C8		     1					mov cx,ax
 0A88  80 A8 12E5 R 30	     1					sub dino2[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0A8D  8A 80 12E5 R	     1							mov al, dino2[bx+si]
 0A91  80 B8 12E5 R 03	     1							cmp dino2[bx+si], 3
 0A96  75 02		     1							jne ??0098
 0A98  B0 60		     1								mov al, 001100000b
 0A9A			     1							??0098:
 0A9A  B4 0C		     1							mov ah, 0ch       
 0A9C  CD 10		     1							int 10h
 0A9E  80 80 12E5 R 30	     1						add dino2[bx+si], '0'
 0AA3  46		     1						inc si
 0AA4  8B C1		     1						mov ax,cx
 0AA6  40		     1						inc ax
 0AA7  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0AAA  75 0A		     1						jne ??0096;
 0AAC  A1 4E65 R	     1					    mov ax, dinoX		;change this 
 0AAF  BE 0000		     1						mov si,0
 0AB2  83 C3 32		     1						add bx,50
 0AB5  42		     1						inc dx
 0AB6			     1						??0096:
 0AB6  59		     1					pop cx
 0AB7  E2 CC		     1					Loop ??0093
 0AB9  E8 F613
 0ABC  FF 06 4EB1 R
 0AC0  E8 F756
 0AC3  8B 0E 4E6D R
 0ACC  A1 4E6D R	     1					mov ax, bush1X	; X co-ordinate
 0ACF  8B 16 4E6F R	     1					mov dx, bush1Y	; Y co-ordinate
 0AD3  B9 023F		     1					mov cx, 575		; size of array = 625
 0AD6  BE 0000		     1					mov si, 0 		; for indexing
 0AD9  BB 0000		     1					mov bx, 0 		; for indexing
 0ADC			     1					??0099:
 0ADC  51		     1					PUSH cx
 0ADD  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0ADF  80 A8 3004 R 30	     1							sub BushType1[bx+si],'0'	; to get a decimal number for color
 0AE4  B0 60		     1							mov al, 001100000b	; array traversing
 0AE6  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0AE8  CD 10		     1							int 10h
 0AEA  80 80 3004 R 30	     1							add BushType1[bx+si],'0'
 0AEF  46		     1							inc si 						; to get next index	of array
 0AF0  8B C1		     1							mov ax,cx					; retrieving value from cx
 0AF2  40		     1							inc ax						; increament in coloumn of drawing pixel
 0AF3  83 FE 19		     1							cmp si, 25					; if si is 25 then change row
 0AF6  75 0A		     1							jne ??009C;					; if there is no need to change row
 0AF8  A1 4E6D R	     1						    mov ax, bush1X				; taking coloumn back to start
 0AFB  BE 0000		     1							mov si, 0					;
 0AFE  83 C3 19		     1							add bx, 25					; going to next row of array
 0B01  42		     1							inc dx
 0B02			     1						??009C:
 0B02  59		     1					POP cx
 0B03  E2 D7		     1					Loop ??0099
 0B05  B9 0280
 0B08  89 0E 4E6D R
 0B0C  C7 06 4E6F R 0091
 0B12  8B 0E 4E71 R
 0B1B  A1 4E71 R	     1					mov ax, bush2X	; X co-ordinate
 0B1E  8B 16 4E73 R	     1					mov dx, bush2Y	; Y co-ordinate
 0B22  B9 0514		     1					mov cx, 1300	; size of array = 1450
 0B25  BE 0000		     1					mov si, 0 		; for indexing
 0B28  BB 0000		     1					mov bx, 0 		; for indexing
 0B2B			     1					??009D:
 0B2B  51		     1					PUSH cx
 0B2C  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0B2E  80 A8 32B6 R 30	     1							sub BushType2[bx+si],'0'	; to get a decimal number for color
 0B33  B0 60		     1							mov al, 001100000b					; array traversing
 0B35  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0B37  CD 10		     1							int 10h
 0B39  80 80 32B6 R 30	     1							add BushType2[bx+si],'0'   
 0B3E  46		     1							inc si 						; to get next index	of array
 0B3F  8B C1		     1							mov ax,cx					; retrieving value from cx
 0B41  40		     1							inc ax						; increament in coloumn of drawing pixel
 0B42  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 0B45  75 0A		     1							jne ??00A0;				; if there is no need to change row
 0B47  A1 4E71 R	     1						    mov ax, bush2X				; taking coloumn back to start
 0B4A  BE 0000		     1							mov si, 0					;
 0B4D  83 C3 32		     1							add bx, 50					; going to next row of array
 0B50  42		     1							inc dx
 0B51			     1						??00A0:
 0B51  59		     1					POP cx
 0B52  E2 D7		     1					Loop ??009D
 0B54  B9 03C0
 0B57  89 0E 4E71 R
 0B5B  C7 06 4E73 R 008E
 0B61  8B 0E 4E69 R
 0B6A  A1 4E69 R	     1					mov ax, dragoX	; X co-ordinate
 0B6D  8B 16 4E6B R	     1					mov dx, dragoY	; Y co-ordinate
 0B71  B9 05E1		     1					mov cx, 1505		; size of array = 840
 0B74  BE 0000		     1					mov si, 0 		; for indexing
 0B77  BB 0000		     1					mov bx, 0 		; for indexing
 0B7A			     1					??00A1:
 0B7A  51		     1					PUSH cx
 0B7B  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0B7D  80 A8 1925 R 30	     1							sub Drago[bx+si],'0'		; to get a decimal number for color
 0B82  B0 60		     1							mov al, 001100000b		; array traversing
 0B84  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0B86  CD 10		     1							int 10h
 0B88  80 80 1925 R 30	     1							add Drago[bx+si],'0'
 0B8D  46		     1							inc si 						; to get next index	of array
 0B8E  8B C1		     1							mov ax,cx					; retrieving value from cx
 0B90  40		     1							inc ax						; increament in coloumn of drawing pixel
 0B91  83 FE 20		     1							cmp si, 32					; if si is 50 then change row
 0B94  75 0A		     1							jne ??00A4;				; if there is no need to change row
 0B96  A1 4E69 R	     1						    mov ax, dragoX				; taking coloumn back to start
 0B99  BE 0000		     1							mov si, 0					;
 0B9C  83 C3 20		     1							add bx, 32					; going to next row of array
 0B9F  42		     1							inc dx
 0BA0			     1						??00A4:
 0BA0  59		     1					POP cx
 0BA1  E2 D7		     1					Loop ??00A1
 0BA3  B9 0668
 0BA6  89 0E 4E69 R
 0BAA  C7 06 4E6B R 0073
 0BB0  E8 F553
 0BB3  83 2E 4E69 R 08
 0BB8  83 2E 4E6D R 08
 0BBD  83 2E 4E71 R 08
 0BC2
 0BC2
 0BC2  B8 0000
 0BC5  BB 00A7
 0BC8  B9 0280
 0BCB
 0BCB  51
 0BCC  8B C8
 0BCE  8B D3
 0BD0  50
 0BD1  B0 07
 0BD3  B4 0C
 0BD5  CD 10
 0BD7  58
 0BD8  40
 0BD9  59
 0BDA  E2 EF
 0BDC  B9 0001
 0BDF
 0BDF  51
 0BE0  E8 F88C
 0BE3  59
 0BE4  41
 0BE5  E2 F8
 0BE7  C3
 0BE8
 0BE8
 0BE8  B8 ---- R
 0BEB  8E D8
 0BED  B0 13
 0BEF  B4 00
 0BF1  CD 10
 0BF3  B8 003C		     1					mov ax, 60	; X co-ordinate
 0BF6  BA 0014		     1					mov dx, 20	; Y co-ordinate
 0BF9  B9 05AA		     1					mov cx, 1450	; size of array = 1450
 0BFC  BE 0000		     1					mov si, 0 		; for indexing
 0BFF  BB 0000		     1					mov bx, 0 		; for indexing
 0C02			     1					??00A5:
 0C02  51		     1					PUSH cx
 0C03  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0C05  80 A8 1F06 R 30	     1							sub Dalpha[bx+si], '0'		; to get a decimal number for color
 0C0A  8A 80 1F06 R	     1							mov al, Dalpha[bx+si]		; array traversing
 0C0E  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0C10  CD 10		     1							int 10h
 0C12  80 80 1F06 R 30	     1							add Dalpha[bx+si],'0'
 0C17  46		     1							inc si 						; to get next index	of array
 0C18  8B C1		     1							mov ax,cx					; retrieving value from cx
 0C1A  40		     1							inc ax						; increament in coloumn of drawing pixel
 0C1B  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 0C1E  75 0A		     1							jne ??00A8;				; if there is no need to change row
 0C20  B8 003C		     1						    mov ax, 60				; taking coloumn back to start
 0C23  BE 0000		     1							mov si, 0					;
 0C26  83 C3 32		     1							add bx, 50					; going to next row of array
 0C29  42		     1							inc dx
 0C2A			     1						??00A8:
 0C2A  59		     1					POP cx
 0C2B  E2 D5		     1					Loop ??00A5
 0C2D  B8 006E		     1					mov ax, 110	; X coordinates
 0C30  BA 0014		     1					mov dx, 20	; Y coordinates
 0C33  B9 0640		     1					mov cx, 1600
 0C36  BE 0000		     1					mov si,0
 0C39  BB 0000		     1					mov bx,0
 0C3C			     1					??00A9:
 0C3C  51		     1					push cx
 0C3D  8B C8		     1					mov cx,ax
 0C3F  80 A8 0025 R 30	     1					sub dino[bx+si], '0'		;if dino[bx+si]==1 then draw pixel
 0C44  8A 80 0025 R	     1							mov al, dino[bx+si]
 0C48  80 B8 0025 R 03	     1							cmp dino[bx+si], 3
 0C4D  75 02		     1							jne ??00AD
 0C4F  B0 60		     1								mov al, 001100000b
 0C51			     1							??00AD:
 0C51  B4 0C		     1							mov ah, 0ch       
 0C53  CD 10		     1							int 10h
 0C55  80 80 0025 R 30	     1						add dino[bx+si], '0'
 0C5A  46		     1						inc si
 0C5B  8B C1		     1						mov ax,cx
 0C5D  40		     1						inc ax
 0C5E  83 FE 32		     1						cmp si,50			;if si==25 row change dino
 0C61  75 0A		     1						jne ??00AC;
 0C63  B8 006E		     1					    mov ax, 110		;change this 
 0C66  BE 0000		     1						mov si,0
 0C69  83 C3 32		     1						add bx,50
 0C6C  42		     1						inc dx
 0C6D			     1						??00AC:
 0C6D  59		     1					pop cx
 0C6E  E2 CC		     1					Loop ??00A9
 0C70  B8 00A0		     1					mov ax, 160	; X co-ordinate
 0C73  BA 0014		     1					mov dx, 20	; Y co-ordinate
 0C76  B9 05AA		     1					mov cx, 1450	; size of array = 1450
 0C79  BE 0000		     1					mov si, 0 		; for indexing
 0C7C  BB 0000		     1					mov bx, 0 		; for indexing
 0C7F			     1					??00AE:
 0C7F  51		     1					PUSH cx
 0C80  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0C82  80 A8 24B0 R 30	     1							sub Nalpha[bx+si],'0'		; to get a decimal number for color
 0C87  8A 80 24B0 R	     1							mov al, Nalpha[bx+si]		; array traversing
 0C8B  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0C8D  CD 10		     1							int 10h
 0C8F  80 80 24B0 R 30	     1							add Nalpha[bx+si],'0' 
 0C94  46		     1							inc si 						; to get next index	of array
 0C95  8B C1		     1							mov ax,cx					; retrieving value from cx
 0C97  40		     1							inc ax						; increament in coloumn of drawing pixel
 0C98  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 0C9B  75 0A		     1							jne ??00B1;				; if there is no need to change row
 0C9D  B8 00A0		     1						    mov ax, 160				; taking coloumn back to start
 0CA0  BE 0000		     1							mov si, 0					;
 0CA3  83 C3 32		     1							add bx, 50					; going to next row of array
 0CA6  42		     1							inc dx
 0CA7			     1						??00B1:
 0CA7  59		     1					POP cx
 0CA8  E2 D5		     1					Loop ??00AE
 0CAA  B8 00C8		     1					mov ax, 200	; X co-ordinate
 0CAD  BA 0014		     1					mov dx, 20	; Y co-ordinate
 0CB0  B9 05AA		     1					mov cx, 1450	; size of array = 1450
 0CB3  BE 0000		     1					mov si, 0 		; for indexing
 0CB6  BB 0000		     1					mov bx, 0 		; for indexing
 0CB9			     1					??00B2:
 0CB9  51		     1					PUSH cx
 0CBA  8B C8		     1							mov cx,ax 					; moving X co-ordinate in cx for interupt
 0CBC  80 A8 2A5A R 30	     1							sub Oalpha[bx+si],'0'		; to get a decimal number for color
 0CC1  8A 80 2A5A R	     1							mov al, Oalpha[bx+si]		; array traversing
 0CC5  B4 0C		     1							mov ah, 0ch       			; interupt to draw pixel
 0CC7  CD 10		     1							int 10h
 0CC9  80 80 2A5A R 30	     1							add Oalpha[bx+si],'0' 
 0CCE  46		     1							inc si 						; to get next index	of array
 0CCF  8B C1		     1							mov ax,cx					; retrieving value from cx
 0CD1  40		     1							inc ax						; increament in coloumn of drawing pixel
 0CD2  83 FE 32		     1							cmp si, 50					; if si is 50 then change row
 0CD5  75 0A		     1							jne ??00B5;				; if there is no need to change row
 0CD7  B8 00C8		     1						    mov ax, 200				; taking coloumn back to start
 0CDA  BE 0000		     1							mov si, 0					;
 0CDD  83 C3 32		     1							add bx, 50					; going to next row of array
 0CE0  42		     1							inc dx
 0CE1			     1						??00B5:
 0CE1  59		     1					POP cx
 0CE2  E2 D5		     1					Loop ??00B2
 0CE4  E8 0007
 0CE7  E8 0004
 0CEA  B4 4C
 0CEC  CD 21
 0CEE
 0CEE
 0CEE  B9 0009
 0CF1  BE 0000 R
 0CF4  B2 0F
 0CF6
 0CF6  51
 0CF7  B8 0000
 0CFA  B4 02
 0CFC  B7 00
 0CFE  B6 0A
 0D00  CD 10
 0D02  8A 04
 0D04  B7 00
 0D06  B3 70
 0D08  B9 0001
 0D0B  B4 09
 0D0D  CD 10
 0D0F  B4 02
 0D11  FE C2
 0D13  46
 0D14  CD 10
 0D16  59
 0D17  E2 DD
 0D19  B9 000C
 0D1C  BE 0009 R
 0D1F  B2 0D
 0D21
 0D21  51
 0D22  B8 0000
 0D25  B4 02
 0D27  B7 00
 0D29  B6 0F
 0D2B  CD 10
 0D2D  8A 04
 0D2F  B7 00
 0D31  B3 70
 0D33  B9 0001
 0D36  B4 09
 0D38  CD 10
 0D3A  B4 02
 0D3C  FE C2
 0D3E  46
 0D3F  CD 10
 0D41  59
 0D42  E2 DD
 0D44  B9 0004
 0D47  BE 0015 R
 0D4A  B2 11
 0D4C
 0D4C  51
 0D4D  B8 0000
 0D50  B4 02
 0D52  B7 00
 0D54  B6 14
 0D56  CD 10
 0D58  8A 04
 0D5A  B7 00
 0D5C  B3 70
 0D5E  B9 0001
 0D61  B4 09
 0D63  CD 10
 0D65  B4 02
 0D67  FE C2
 0D69  46
 0D6A  CD 10
 0D6C  59
 0D6D  E2 DD
 0D6F  B8 0001
 0D72  CD 33
 0D74
 0D74  B8 0003
 0D77  CD 33
 0D99  B0 13
 0D9B  B4 00
 0D9D  CD 10
 0D9F  B4 06
 0DA1  B0 10
 0DA3  B7 60
 0DA5  B5 00
 0DA7  B1 00
 0DA9  B6 14
 0DAB  B2 28
 0DAD  CD 10
 0DAF  E8 FE10
 0DB2  B4 4C
 0DB4  CD 21
 0DD7  B0 13
 0DD9  B4 00
 0DDB  CD 10
 0DDD  E8 F220
 0DE0  B4 4C
 0DE2  CD 21
 0E06  B0 13
 0E08  B4 00
 0E0A  CD 10
 0E0C  E8 0007
 0E0F  B4 4C
 0E11  CD 21
 0E13  E9 FF5E
 0E16
 0E16
 0E16  B9 000C
 0E19  BE 0019 R
 0E1C  B2 11
 0E1E
 0E1E  51
 0E1F  B8 0000
 0E22  B4 02
 0E24  B7 00
 0E26  B6 06
 0E28  CD 10
 0E2A  8A 04
 0E2C  B7 00
 0E2E  B3 70
 0E30  B9 0001
 0E33  B4 09
 0E35  CD 10
 0E37  B4 02
 0E39  FE C2
 0E3B  46
 0E3C  CD 10
 0E3E  59
 0E3F  E2 DD
 0E41  C3
 0E42
Microsoft (R) Macro Assembler Version 6.11		    10/30/22 18:33:41
dino.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

DrawBushType1  . . . . . . . . .	Proc
DrawBushType2  . . . . . . . . .	Proc
DrawClouds . . . . . . . . . . .	Proc
DrawDaplha . . . . . . . . . . .	Proc
DrawDino1  . . . . . . . . . . .	Proc
DrawDino2  . . . . . . . . . . .	Proc
DrawDino . . . . . . . . . . . .	Proc
DrawDrago  . . . . . . . . . . .	Proc
DrawDuckDino . . . . . . . . . .	Proc
DrawHeart  . . . . . . . . . . .	Proc
DrawNaplha . . . . . . . . . . .	Proc
DrawOaplha . . . . . . . . . . .	Proc
DrawStars  . . . . . . . . . . .	Proc
remBushType1 . . . . . . . . . .	Proc
remBushType2 . . . . . . . . . .	Proc
remClouds  . . . . . . . . . . .	Proc
remDino  . . . . . . . . . . . .	Proc
remDrago . . . . . . . . . . . .	Proc
remHeart . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 4EBC	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0E42	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

EXITdisplay  . . . . . . . . . .	P Near	 0E16	  _TEXT	Length= 002C Public
  display3 . . . . . . . . . . .	L Near	 0E1E	  _TEXT	
collisionOfPlayer  . . . . . . .	P Near	 0106	  _TEXT	Length= 0113 Public
  ??0000 . . . . . . . . . . . .	L Near	 0138	  _TEXT	
  ??0003 . . . . . . . . . . . .	L Near	 015E	  _TEXT	
  ??0004 . . . . . . . . . . . .	L Near	 018D	  _TEXT	
  ??0007 . . . . . . . . . . . .	L Near	 01B3	  _TEXT	
  ??0008 . . . . . . . . . . . .	L Near	 01E5	  _TEXT	
  ??000B . . . . . . . . . . . .	L Near	 020B	  _TEXT	
displayGameScreen  . . . . . . .	P Near	 0BC2	  _TEXT	Length= 0026 Public
  drawLineLow  . . . . . . . . .	L Near	 0BCB	  _TEXT	
  loopPlay . . . . . . . . . . .	L Near	 0BDF	  _TEXT	
displayInstructions  . . . . . .	P Near	 0000	  _TEXT	Length= 00A8 Public
display  . . . . . . . . . . . .	P Near	 00A8	  _TEXT	Length= 0020 Public
  L11  . . . . . . . . . . . . .	L Near	 00B1	  _TEXT	
  L22  . . . . . . . . . . . . .	L Near	 00BD	  _TEXT	
main . . . . . . . . . . . . . .	P Near	 0BE8	  _TEXT	Length= 0106 Public
  ??00A5 . . . . . . . . . . . .	L Near	 0C02	  _TEXT	
  ??00A8 . . . . . . . . . . . .	L Near	 0C2A	  _TEXT	
  ??00A9 . . . . . . . . . . . .	L Near	 0C3C	  _TEXT	
  ??00AD . . . . . . . . . . . .	L Near	 0C51	  _TEXT	
  ??00AC . . . . . . . . . . . .	L Near	 0C6D	  _TEXT	
  ??00AE . . . . . . . . . . . .	L Near	 0C7F	  _TEXT	
  ??00B1 . . . . . . . . . . . .	L Near	 0CA7	  _TEXT	
  ??00B2 . . . . . . . . . . . .	L Near	 0CB9	  _TEXT	
  ??00B5 . . . . . . . . . . . .	L Near	 0CE1	  _TEXT	
movementOfPlayer . . . . . . . .	P Near	 0219	  _TEXT	Length= 0256 Public
  up . . . . . . . . . . . . . .	L Near	 0249	  _TEXT	
  ??000C . . . . . . . . . . . .	L Near	 0259	  _TEXT	
  ??0010 . . . . . . . . . . . .	L Near	 026C	  _TEXT	
  ??000F . . . . . . . . . . . .	L Near	 0288	  _TEXT	
  down . . . . . . . . . . . . .	L Near	 0294	  _TEXT	
  ??0011 . . . . . . . . . . . .	L Near	 02A4	  _TEXT	
  ??0015 . . . . . . . . . . . .	L Near	 02B7	  _TEXT	
  ??0014 . . . . . . . . . . . .	L Near	 02D3	  _TEXT	
  left . . . . . . . . . . . . .	L Near	 02DF	  _TEXT	
  ??0016 . . . . . . . . . . . .	L Near	 02EF	  _TEXT	
  ??001A . . . . . . . . . . . .	L Near	 0302	  _TEXT	
  ??0019 . . . . . . . . . . . .	L Near	 031E	  _TEXT	
  right  . . . . . . . . . . . .	L Near	 0329	  _TEXT	
  ??001B . . . . . . . . . . . .	L Near	 0339	  _TEXT	
  ??001F . . . . . . . . . . . .	L Near	 034C	  _TEXT	
  ??001E . . . . . . . . . . . .	L Near	 0368	  _TEXT	
  exiting  . . . . . . . . . . .	L Near	 0371	  _TEXT	
  ??0020 . . . . . . . . . . . .	L Near	 03A4	  _TEXT	
  ??0024 . . . . . . . . . . . .	L Near	 03B7	  _TEXT	
  ??0023 . . . . . . . . . . . .	L Near	 03D3	  _TEXT	
  ??0025 . . . . . . . . . . . .	L Near	 0403	  _TEXT	
  ??0029 . . . . . . . . . . . .	L Near	 0418	  _TEXT	
  ??0028 . . . . . . . . . . . .	L Near	 0434	  _TEXT	
newLine  . . . . . . . . . . . .	P Near	 00C8	  _TEXT	Length= 0007 Public
options  . . . . . . . . . . . .	P Near	 0CEE	  _TEXT	Length= 04EB Public
  display1 . . . . . . . . . . .	L Near	 0CF6	  _TEXT	
  display2 . . . . . . . . . . .	L Near	 0D21	  _TEXT	
  display3 . . . . . . . . . . .	L Near	 0D4C	  _TEXT	
  mouse  . . . . . . . . . . . .	L Near	 0D74	  _TEXT	
playGameMac  . . . . . . . . . .	P Near	 046F	  _TEXT	Length= 0753 Public
  ??002A . . . . . . . . . . . .	L Near	 0488	  _TEXT	
  ??002E . . . . . . . . . . . .	L Near	 049D	  _TEXT	
  ??002D . . . . . . . . . . . .	L Near	 04B9	  _TEXT	
  ??002F . . . . . . . . . . . .	L Near	 04D5	  _TEXT	
  ??0033 . . . . . . . . . . . .	L Near	 04EA	  _TEXT	
  ??0032 . . . . . . . . . . . .	L Near	 0506	  _TEXT	
  ??0034 . . . . . . . . . . . .	L Near	 0522	  _TEXT	
  ??0038 . . . . . . . . . . . .	L Near	 0537	  _TEXT	
  ??0037 . . . . . . . . . . . .	L Near	 0553	  _TEXT	
  ??0039 . . . . . . . . . . . .	L Near	 0566	  _TEXT	
  ??003D . . . . . . . . . . . .	L Near	 057B	  _TEXT	
  ??003C . . . . . . . . . . . .	L Near	 0597	  _TEXT	
  ??003E . . . . . . . . . . . .	L Near	 05AA	  _TEXT	
  ??0042 . . . . . . . . . . . .	L Near	 05BF	  _TEXT	
  ??0041 . . . . . . . . . . . .	L Near	 05DB	  _TEXT	
  ??0043 . . . . . . . . . . . .	L Near	 05EE	  _TEXT	
  ??0047 . . . . . . . . . . . .	L Near	 0603	  _TEXT	
  ??0046 . . . . . . . . . . . .	L Near	 061F	  _TEXT	
  ??0048 . . . . . . . . . . . .	L Near	 064C	  _TEXT	
  ??004B . . . . . . . . . . . .	L Near	 0672	  _TEXT	
  drawThree  . . . . . . . . . .	L Near	 0679	  _TEXT	
  ??004C . . . . . . . . . . . .	L Near	 0689	  _TEXT	
  ??004F . . . . . . . . . . . .	L Near	 06B1	  _TEXT	
  ??0050 . . . . . . . . . . . .	L Near	 06C4	  _TEXT	
  ??0053 . . . . . . . . . . . .	L Near	 06EC	  _TEXT	
  ??0054 . . . . . . . . . . . .	L Near	 06FF	  _TEXT	
  ??0057 . . . . . . . . . . . .	L Near	 0727	  _TEXT	
  drawTwo  . . . . . . . . . . .	L Near	 072D	  _TEXT	
  ??0058 . . . . . . . . . . . .	L Near	 073D	  _TEXT	
  ??005B . . . . . . . . . . . .	L Near	 0763	  _TEXT	
  ??005C . . . . . . . . . . . .	L Near	 0776	  _TEXT	
  ??005F . . . . . . . . . . . .	L Near	 079E	  _TEXT	
  ??0060 . . . . . . . . . . . .	L Near	 07B1	  _TEXT	
  ??0063 . . . . . . . . . . . .	L Near	 07D9	  _TEXT	
  drawOne  . . . . . . . . . . .	L Near	 07DF	  _TEXT	
  ??0064 . . . . . . . . . . . .	L Near	 07EF	  _TEXT	
  ??0067 . . . . . . . . . . . .	L Near	 0815	  _TEXT	
  ??0068 . . . . . . . . . . . .	L Near	 0828	  _TEXT	
  ??006B . . . . . . . . . . . .	L Near	 084E	  _TEXT	
  ??006C . . . . . . . . . . . .	L Near	 0861	  _TEXT	
  ??006F . . . . . . . . . . . .	L Near	 0889	  _TEXT	
  contPlay . . . . . . . . . . .	L Near	 088C	  _TEXT	
  ??0070 . . . . . . . . . . . .	L Near	 089D	  _TEXT	
  ??0074 . . . . . . . . . . . .	L Near	 08B2	  _TEXT	
  ??0073 . . . . . . . . . . . .	L Near	 08CE	  _TEXT	
  ??0075 . . . . . . . . . . . .	L Near	 08E1	  _TEXT	
  ??0079 . . . . . . . . . . . .	L Near	 08F6	  _TEXT	
  ??0078 . . . . . . . . . . . .	L Near	 0912	  _TEXT	
  ??007A . . . . . . . . . . . .	L Near	 0925	  _TEXT	
  ??007E . . . . . . . . . . . .	L Near	 093A	  _TEXT	
  ??007D . . . . . . . . . . . .	L Near	 0956	  _TEXT	
  ??007F . . . . . . . . . . . .	L Near	 0969	  _TEXT	
  ??0083 . . . . . . . . . . . .	L Near	 097E	  _TEXT	
  ??0082 . . . . . . . . . . . .	L Near	 099A	  _TEXT	
  ??0084 . . . . . . . . . . . .	L Near	 09AD	  _TEXT	
  ??0088 . . . . . . . . . . . .	L Near	 09C2	  _TEXT	
  ??0087 . . . . . . . . . . . .	L Near	 09DE	  _TEXT	
  ??0089 . . . . . . . . . . . .	L Near	 09FD	  _TEXT	
  ??008D . . . . . . . . . . . .	L Near	 0A12	  _TEXT	
  ??008C . . . . . . . . . . . .	L Near	 0A2E	  _TEXT	
  ??008E . . . . . . . . . . . .	L Near	 0A41	  _TEXT	
  ??0092 . . . . . . . . . . . .	L Near	 0A56	  _TEXT	
  ??0091 . . . . . . . . . . . .	L Near	 0A72	  _TEXT	
  ??0093 . . . . . . . . . . . .	L Near	 0A85	  _TEXT	
  ??0098 . . . . . . . . . . . .	L Near	 0A9A	  _TEXT	
  ??0096 . . . . . . . . . . . .	L Near	 0AB6	  _TEXT	
  ??0099 . . . . . . . . . . . .	L Near	 0ADC	  _TEXT	
  ??009C . . . . . . . . . . . .	L Near	 0B02	  _TEXT	
  ??009D . . . . . . . . . . . .	L Near	 0B2B	  _TEXT	
  ??00A0 . . . . . . . . . . . .	L Near	 0B51	  _TEXT	
  ??00A1 . . . . . . . . . . . .	L Near	 0B7A	  _TEXT	
  ??00A4 . . . . . . . . . . . .	L Near	 0BA0	  _TEXT	
scoreBarDisplay  . . . . . . . .	P Near	 00CF	  _TEXT	Length= 0037 Public
  display212 . . . . . . . . . .	L Near	 00D7	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BushType1  . . . . . . . . . . .	Byte	 3004	  _DATA	
BushType2  . . . . . . . . . . .	Byte	 32B6	  _DATA	
Clouds . . . . . . . . . . . . .	Byte	 38BD	  _DATA	
Dalpha . . . . . . . . . . . . .	Byte	 1F06	  _DATA	
Dino1  . . . . . . . . . . . . .	Byte	 0CA5	  _DATA	
Dino2  . . . . . . . . . . . . .	Byte	 12E5	  _DATA	
Dino . . . . . . . . . . . . . .	Byte	 0025	  _DATA	
Drago  . . . . . . . . . . . . .	Byte	 1925	  _DATA	
Heart  . . . . . . . . . . . . .	Byte	 37CA	  _DATA	
Nalpha . . . . . . . . . . . . .	Byte	 24B0	  _DATA	
Oalpha . . . . . . . . . . . . .	Byte	 2A5A	  _DATA	
Star1  . . . . . . . . . . . . .	Byte	 381B	  _DATA	
buffer . . . . . . . . . . . . .	Byte	 3AC2	  _DATA	
bush1X . . . . . . . . . . . . .	Word	 4E6D	  _DATA	
bush1Y . . . . . . . . . . . . .	Word	 4E6F	  _DATA	
bush2X . . . . . . . . . . . . .	Word	 4E71	  _DATA	
bush2Y . . . . . . . . . . . . .	Word	 4E73	  _DATA	
buttonCheck  . . . . . . . . . .	Word	 4EAD	  _DATA	
cloud1X  . . . . . . . . . . . .	Word	 4E75	  _DATA	
cloud1Y  . . . . . . . . . . . .	Word	 4E77	  _DATA	
cloud2X  . . . . . . . . . . . .	Word	 4E79	  _DATA	
cloud2Y  . . . . . . . . . . . .	Word	 4E7B	  _DATA	
cloud3X  . . . . . . . . . . . .	Word	 4E7D	  _DATA	
cloud3Y  . . . . . . . . . . . .	Word	 4E7F	  _DATA	
dateMessage  . . . . . . . . . .	Byte	 4E57	  _DATA	
day  . . . . . . . . . . . . . .	Byte	 4E61	  _DATA	
dinoX  . . . . . . . . . . . . .	Word	 4E65	  _DATA	
dinoY  . . . . . . . . . . . . .	Word	 4E67	  _DATA	
dragoX . . . . . . . . . . . . .	Word	 4E69	  _DATA	
dragoY . . . . . . . . . . . . .	Word	 4E6B	  _DATA	
duckDino . . . . . . . . . . . .	Byte	 0665	  _DATA	
exitStatement  . . . . . . . . .	Byte	 0015	  _DATA	
file . . . . . . . . . . . . . .	Byte	 3AB5	  _DATA	
goodBye  . . . . . . . . . . . .	Byte	 0019	  _DATA	
heart1X  . . . . . . . . . . . .	Word	 4E95	  _DATA	
heart1Y  . . . . . . . . . . . .	Word	 4E97	  _DATA	
heart2X  . . . . . . . . . . . .	Word	 4E99	  _DATA	
heart2Y  . . . . . . . . . . . .	Word	 4E9B	  _DATA	
heart3X  . . . . . . . . . . . .	Word	 4E9D	  _DATA	
heart3Y  . . . . . . . . . . . .	Word	 4E9F	  _DATA	
hour . . . . . . . . . . . . . .	Byte	 4E54	  _DATA	
instructions . . . . . . . . . .	Byte	 0009	  _DATA	
livesCount . . . . . . . . . . .	Word	 4EAF	  _DATA	
min  . . . . . . . . . . . . . .	Byte	 4E55	  _DATA	
month  . . . . . . . . . . . . .	Byte	 4E62	  _DATA	
playGame . . . . . . . . . . . .	Byte	 0000	  _DATA	
scoreBar . . . . . . . . . . . .	Byte	 4EB3	  _DATA	
scoreCounter . . . . . . . . . .	Word	 4EB1	  _DATA	
sec  . . . . . . . . . . . . . .	Byte	 4E56	  _DATA	
star1X . . . . . . . . . . . . .	Word	 4E81	  _DATA	
star1Y . . . . . . . . . . . . .	Word	 4E83	  _DATA	
star2X . . . . . . . . . . . . .	Word	 4E85	  _DATA	
star2Y . . . . . . . . . . . . .	Word	 4E87	  _DATA	
star3X . . . . . . . . . . . . .	Word	 4E89	  _DATA	
star3Y . . . . . . . . . . . . .	Word	 4E8B	  _DATA	
star4X . . . . . . . . . . . . .	Word	 4E8D	  _DATA	
star4Y . . . . . . . . . . . . .	Word	 4E8F	  _DATA	
star5X . . . . . . . . . . . . .	Word	 4E91	  _DATA	
star5Y . . . . . . . . . . . . .	Word	 4E93	  _DATA	
tempBush1X . . . . . . . . . . .	Word	 4EA7	  _DATA	
tempBush2X . . . . . . . . . . .	Word	 4EA9	  _DATA	
tempCloud1X  . . . . . . . . . .	Word	 4EA1	  _DATA	
tempCloud2X  . . . . . . . . . .	Word	 4EA3	  _DATA	
tempCloud3X  . . . . . . . . . .	Word	 4EA5	  _DATA	
tempDragoX . . . . . . . . . . .	Word	 4EAB	  _DATA	
timeMessage  . . . . . . . . . .	Byte	 4E4A	  _DATA	
year . . . . . . . . . . . . . .	Word	 4E63	  _DATA	

	   0 Warnings
	   0 Errors
